// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ecoearn_rewards.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EcoEarn.Contracts.Rewards {

  /// <summary>Holder for reflection information generated from ecoearn_rewards.proto</summary>
  public static partial class EcoearnRewardsReflection {

    #region Descriptor
    /// <summary>File descriptor for ecoearn_rewards.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EcoearnRewardsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVlY29lYXJuX3Jld2FyZHMucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVs",
            "Zi9vcHRpb25zLnByb3RvGgthY3MxMi5wcm90bxobZ29vZ2xlL3Byb3RvYnVm",
            "L2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3Rv",
            "It4BCg9Jbml0aWFsaXplSW5wdXQSHAoFYWRtaW4YASABKAsyDS5hZWxmLkFk",
            "ZHJlc3MSLgoXZWNvZWFybl9wb2ludHNfY29udHJhY3QYAiABKAsyDS5hZWxm",
            "LkFkZHJlc3MSLgoXZWNvZWFybl90b2tlbnNfY29udHJhY3QYAyABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSJgoPcG9pbnRzX2NvbnRyYWN0GAQgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEiUKDnVwZGF0ZV9hZGRyZXNzGAUgASgLMg0uYWVsZi5BZGRyZXNz",
            "IjcKBkNvbmZpZxItChZkZWZhdWx0X3VwZGF0ZV9hZGRyZXNzGAEgASgLMg0u",
            "YWVsZi5BZGRyZXNzIoEBCg1SZWdpc3RlcklucHV0EhsKB2RhcHBfaWQYASAB",
            "KAsyCi5hZWxmLkhhc2gSHAoFYWRtaW4YAiABKAsyDS5hZWxmLkFkZHJlc3MS",
            "JQoOdXBkYXRlX2FkZHJlc3MYAyABKAsyDS5hZWxmLkFkZHJlc3MSDgoGZG9t",
            "YWluGAQgASgJIjMKCkRhcHBDb25maWcSJQoOdXBkYXRlX2FkZHJlc3MYASAB",
            "KAsyDS5hZWxmLkFkZHJlc3MiYgoIRGFwcEluZm8SGwoHZGFwcF9pZBgBIAEo",
            "CzIKLmFlbGYuSGFzaBIcCgVhZG1pbhgCIAEoCzINLmFlbGYuQWRkcmVzcxIb",
            "CgZjb25maWcYAyABKAsyCy5EYXBwQ29uZmlnIlQKFUdldFJld2FyZEFkZHJl",
            "c3NJbnB1dBIbCgdkYXBwX2lkGAEgASgLMgouYWVsZi5IYXNoEh4KB2FjY291",
            "bnQYAiABKAsyDS5hZWxmLkFkZHJlc3MiuQEKCkNsYWltSW5wdXQSGwoHZGFw",
            "cF9pZBgBIAEoCzIKLmFlbGYuSGFzaBIbCgdwb29sX2lkGAIgASgLMgouYWVs",
            "Zi5IYXNoEh4KB2FjY291bnQYAyABKAsyDS5hZWxmLkFkZHJlc3MSDgoGc3lt",
            "Ym9sGAQgASgJEg4KBmFtb3VudBgFIAEoAxIXCg9yZWxlYXNlX3BlcmlvZHMY",
            "BiADKAMSGAoEc2VlZBgHIAEoCzIKLmFlbGYuSGFzaCLbAgoJQ2xhaW1JbmZv",
            "EhwKCGNsYWltX2lkGAEgASgLMgouYWVsZi5IYXNoEhsKB3Bvb2xfaWQYAiAB",
            "KAsyCi5hZWxmLkhhc2gSFgoOY2xhaW1lZF9hbW91bnQYAyABKAMSFgoOY2xh",
            "aW1lZF9zeW1ib2wYBCABKAkSHAoUY2xhaW1lZF9ibG9ja19udW1iZXIYBSAB",
            "KAMSHgoHYWNjb3VudBgGIAEoCzINLmFlbGYuQWRkcmVzcxIwCgxjbGFpbWVk",
            "X3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjAKDHJl",
            "bGVhc2VfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "GAoEc2VlZBgJIAEoCzIKLmFlbGYuSGFzaBInChBjb250cmFjdF9hZGRyZXNz",
            "GAogASgLMg0uYWVsZi5BZGRyZXNzIiYKCkNsYWltSW5mb3MSGAoEZGF0YRgB",
            "IAMoCzIKLkNsYWltSW5mbyLCAQoNV2l0aGRyYXdJbnB1dBIdCgljbGFpbV9p",
            "ZHMYASADKAsyCi5hZWxmLkhhc2gSHgoHYWNjb3VudBgCIAEoCzINLmFlbGYu",
            "QWRkcmVzcxIOCgZhbW91bnQYAyABKAMSGAoEc2VlZBgEIAEoCzIKLmFlbGYu",
            "SGFzaBIXCg9leHBpcmF0aW9uX3RpbWUYBSABKAMSGwoHZGFwcF9pZBgGIAEo",
            "CzIKLmFlbGYuSGFzaBISCglzaWduYXR1cmUYkE4gASgMIvYBCgpTdGFrZUlu",
            "cHV0Eh0KCWNsYWltX2lkcxgBIAMoCzIKLmFlbGYuSGFzaBIeCgdhY2NvdW50",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzEg4KBmFtb3VudBgDIAEoAxIYCgRzZWVk",
            "GAQgASgLMgouYWVsZi5IYXNoEhcKD2V4cGlyYXRpb25fdGltZRgFIAEoAxIb",
            "Cgdwb29sX2lkGAYgASgLMgouYWVsZi5IYXNoEg4KBnBlcmlvZBgHIAEoAxIb",
            "CgdkYXBwX2lkGAggASgLMgouYWVsZi5IYXNoEhwKFGxvbmdlc3RfcmVsZWFz",
            "ZV90aW1lGAkgASgDIkkKEVN0YWtlUmV3YXJkc0lucHV0EiAKC3N0YWtlX2lu",
            "cHV0GAEgASgLMgsuU3Rha2VJbnB1dBISCglzaWduYXR1cmUYkE4gASgMIk4K",
            "EVNldERhcHBBZG1pbklucHV0EhsKB2RhcHBfaWQYASABKAsyCi5hZWxmLkhh",
            "c2gSHAoFYWRtaW4YAiABKAsyDS5hZWxmLkFkZHJlc3MiTgoSU2V0RGFwcENv",
            "bmZpZ0lucHV0EhsKB2RhcHBfaWQYASABKAsyCi5hZWxmLkhhc2gSGwoGY29u",
            "ZmlnGAIgASgLMgsuRGFwcENvbmZpZyIkCghIYXNoTGlzdBIYCgRkYXRhGAEg",
            "AygLMgouYWVsZi5IYXNoIqkBChlBZGRMaXF1aWRpdHlBbmRTdGFrZUlucHV0",
            "EiAKC3N0YWtlX2lucHV0GAEgASgLMgsuU3Rha2VJbnB1dBITCgt0b2tlbl9h",
            "X21pbhgCIAEoAxITCgt0b2tlbl9iX21pbhgDIAEoAxIsCghkZWFkbGluZRgE",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEgoJc2lnbmF0dXJl",
            "GJBOIAEoDCKsAQoUUmVtb3ZlTGlxdWlkaXR5SW5wdXQSKAoPbGlxdWlkaXR5",
            "X2lucHV0GAEgASgLMg8uTGlxdWlkaXR5SW5wdXQSEwoLdG9rZW5fYV9taW4Y",
            "AiABKAMSEwoLdG9rZW5fYl9taW4YAyABKAMSLAoIZGVhZGxpbmUYBCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIKCXNpZ25hdHVyZRiQTiAB",
            "KAwigAEKE1N0YWtlTGlxdWlkaXR5SW5wdXQSKAoPbGlxdWlkaXR5X2lucHV0",
            "GAEgASgLMg8uTGlxdWlkaXR5SW5wdXQSGwoHcG9vbF9pZBgCIAEoCzIKLmFl",
            "bGYuSGFzaBIOCgZwZXJpb2QYAyABKAMSEgoJc2lnbmF0dXJlGJBOIAEoDCKW",
            "AQoOTGlxdWlkaXR5SW5wdXQSIQoNbGlxdWlkaXR5X2lkcxgBIAMoCzIKLmFl",
            "bGYuSGFzaBIRCglscF9hbW91bnQYAiABKAMSGwoHZGFwcF9pZBgDIAEoCzIK",
            "LmFlbGYuSGFzaBIYCgRzZWVkGAQgASgLMgouYWVsZi5IYXNoEhcKD2V4cGly",
            "YXRpb25fdGltZRgFIAEoAyKgAwoNTGlxdWlkaXR5SW5mbxIgCgxsaXF1aWRp",
            "dHlfaWQYASABKAsyCi5hZWxmLkhhc2gSGAoEc2VlZBgCIAEoCzIKLmFlbGYu",
            "SGFzaBIRCglscF9hbW91bnQYAyABKAMSEQoJbHBfc3ltYm9sGAQgASgJEhUK",
            "DXJld2FyZF9zeW1ib2wYBSABKAkSFgoOdG9rZW5fYV9hbW91bnQYBiABKAMS",
            "FgoOdG9rZW5fYV9zeW1ib2wYByABKAkSFgoOdG9rZW5fYl9hbW91bnQYCCAB",
            "KAMSFgoOdG9rZW5fYl9zeW1ib2wYCSABKAkSLgoKYWRkZWRfdGltZRgKIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGwoHZGFwcF9pZBgLIAEo",
            "CzIKLmFlbGYuSGFzaBIjCgxzd2FwX2FkZHJlc3MYDCABKAsyDS5hZWxmLkFk",
            "ZHJlc3MSJAoNdG9rZW5fYWRkcmVzcxgNIAEoCzINLmFlbGYuQWRkcmVzcxIe",
            "CgdhY2NvdW50GA4gASgLMg0uYWVsZi5BZGRyZXNzIi4KDkxpcXVpZGl0eUlu",
            "Zm9zEhwKBGRhdGEYASADKAsyDi5MaXF1aWRpdHlJbmZvIjYKE0FjY2VwdFJl",
            "ZmVycmFsSW5wdXQSHwoIcmVmZXJyZXIYASABKAsyDS5hZWxmLkFkZHJlc3Mi",
            "TgoQQmF0Y2hTZXR0bGVJbnB1dBITCgthY3Rpb25fbmFtZRgBIAEoCRIlChB1",
            "c2VyX3BvaW50c19saXN0GAIgAygLMgsuVXNlclBvaW50cyJfCgpVc2VyUG9p",
            "bnRzEiMKDHVzZXJfYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcxIsChF1",
            "c2VyX3BvaW50c192YWx1ZRgCIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUiWQoc",
            "U2V0UG9pbnRzQ29udHJhY3RDb25maWdJbnB1dBIbCgdkYXBwX2lkGAEgASgL",
            "MgouYWVsZi5IYXNoEhwKBWFkbWluGAIgASgLMg0uYWVsZi5BZGRyZXNzIm4K",
            "HUdldFBvaW50c0NvbnRyYWN0Q29uZmlnT3V0cHV0EiYKD3BvaW50c19jb250",
            "cmFjdBgBIAEoCzINLmFlbGYuQWRkcmVzcxIlCgZjb25maWcYAiABKAsyFS5Q",
            "b2ludHNDb250cmFjdENvbmZpZyJRChRQb2ludHNDb250cmFjdENvbmZpZxIb",
            "CgdkYXBwX2lkGAEgASgLMgouYWVsZi5IYXNoEhwKBWFkbWluGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzIhsKCUpvaW5JbnB1dBIOCgZkb21haW4YASABKAkiQQoM",
            "Sm9pbkZvcklucHV0Eg4KBmRvbWFpbhgBIAEoCRIhCgpyZWdpc3RyYW50GAIg",
            "ASgLMg0uYWVsZi5BZGRyZXNzIioKCUNvbmZpZ1NldBIXCgZjb25maWcYASAB",
            "KAsyBy5Db25maWc6BKC7GAEiLgoIQWRtaW5TZXQSHAoFYWRtaW4YASABKAsy",
            "DS5hZWxmLkFkZHJlc3M6BKC7GAEiagoKUmVnaXN0ZXJlZBIbCgdkYXBwX2lk",
            "GAEgASgLMgouYWVsZi5IYXNoEhwKBWFkbWluGAIgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEhsKBmNvbmZpZxgDIAEoCzILLkRhcHBDb25maWc6BKC7GAEiTwoNRGFw",
            "cENvbmZpZ1NldBIbCgdkYXBwX2lkGAEgASgLMgouYWVsZi5IYXNoEhsKBmNv",
            "bmZpZxgCIAEoCzILLkRhcHBDb25maWc6BKC7GAEiMQoHQ2xhaW1lZBIgCgtj",
            "bGFpbV9pbmZvcxgBIAEoCzILLkNsYWltSW5mb3M6BKC7GAEiTwoMRGFwcEFk",
            "bWluU2V0EhsKB2RhcHBfaWQYASABKAsyCi5hZWxmLkhhc2gSHAoFYWRtaW4Y",
            "AiABKAsyDS5hZWxmLkFkZHJlc3M6BKC7GAEilgEKCVdpdGhkcmF3bhIcCglj",
            "bGFpbV9pZHMYASABKAsyCS5IYXNoTGlzdBIeCgdhY2NvdW50GAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzEg4KBmFtb3VudBgDIAEoAxIYCgRzZWVkGAQgASgLMgou",
            "YWVsZi5IYXNoEhsKB2RhcHBfaWQYBSABKAsyCi5hZWxmLkhhc2g6BKC7GAEi",
            "5QEKDVJld2FyZHNTdGFrZWQSHAoJY2xhaW1faWRzGAEgASgLMgkuSGFzaExp",
            "c3QSHgoHYWNjb3VudBgCIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZhbW91bnQY",
            "AyABKAMSGAoEc2VlZBgEIAEoCzIKLmFlbGYuSGFzaBIbCgdwb29sX2lkGAUg",
            "ASgLMgouYWVsZi5IYXNoEg4KBnBlcmlvZBgGIAEoAxIbCgdkYXBwX2lkGAcg",
            "ASgLMgouYWVsZi5IYXNoEhwKCHN0YWtlX2lkGAggASgLMgouYWVsZi5IYXNo",
            "OgSguxgBItcBCg5MaXF1aWRpdHlBZGRlZBIcCgljbGFpbV9pZHMYASABKAsy",
            "CS5IYXNoTGlzdBIeCgdhY2NvdW50GAIgASgLMg0uYWVsZi5BZGRyZXNzEg4K",
            "BmFtb3VudBgDIAEoAxIbCgdwb29sX2lkGAQgASgLMgouYWVsZi5IYXNoEg4K",
            "BnBlcmlvZBgFIAEoAxIcCghzdGFrZV9pZBgGIAEoCzIKLmFlbGYuSGFzaBIm",
            "Cg5saXF1aWRpdHlfaW5mbxgHIAEoCzIOLkxpcXVpZGl0eUluZm86BKC7GAEi",
            "tAEKEExpcXVpZGl0eVJlbW92ZWQSIAoNbGlxdWlkaXR5X2lkcxgBIAEoCzIJ",
            "Lkhhc2hMaXN0EhEKCWxwX2Ftb3VudBgCIAEoAxIWCg50b2tlbl9hX2Ftb3Vu",
            "dBgDIAEoAxIWCg50b2tlbl9iX2Ftb3VudBgEIAEoAxIbCgdkYXBwX2lkGAUg",
            "ASgLMgouYWVsZi5IYXNoEhgKBHNlZWQYBiABKAsyCi5hZWxmLkhhc2g6BKC7",
            "GAEisQEKD0xpcXVpZGl0eVN0YWtlZBIgCg1saXF1aWRpdHlfaWRzGAEgASgL",
            "MgkuSGFzaExpc3QSGwoHcG9vbF9pZBgCIAEoCzIKLmFlbGYuSGFzaBIRCgls",
            "cF9hbW91bnQYAyABKAMSDgoGcGVyaW9kGAQgASgDEhwKCHN0YWtlX2lkGAUg",
            "ASgLMgouYWVsZi5IYXNoEhgKBHNlZWQYBiABKAsyCi5hZWxmLkhhc2g6BKC7",
            "GAEiQQoGSm9pbmVkEg4KBmRvbWFpbhgBIAEoCRIhCgpyZWdpc3RyYW50GAIg",
            "ASgLMg0uYWVsZi5BZGRyZXNzOgSguxgBIlkKEFJlZmVycmFsQWNjZXB0ZWQS",
            "HwoIcmVmZXJyZXIYASABKAsyDS5hZWxmLkFkZHJlc3MSHgoHaW52aXRlZRgC",
            "IAEoCzINLmFlbGYuQWRkcmVzczoEoLsYASJuChdQb2ludHNDb250cmFjdENv",
            "bmZpZ1NldBImCg9wb2ludHNfY29udHJhY3QYASABKAsyDS5hZWxmLkFkZHJl",
            "c3MSJQoGY29uZmlnGAIgASgLMhUuUG9pbnRzQ29udHJhY3RDb25maWc6BKC7",
            "GAEyxAwKFkVjb0Vhcm5SZXdhcmRzQ29udHJhY3QSOAoKSW5pdGlhbGl6ZRIQ",
            "LkluaXRpYWxpemVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjMK",
            "CFNldEFkbWluEg0uYWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASOAoIR2V0QWRtaW4SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaDS5h",
            "ZWxmLkFkZHJlc3MiBYiJ9wEBEi4KCVNldENvbmZpZxIHLkNvbmZpZxoWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eSIAEjMKCUdldENvbmZpZxIWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eRoHLkNvbmZpZyIFiIn3AQESNAoIUmVnaXN0ZXISDi5S",
            "ZWdpc3RlcklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPAoMU2V0",
            "RGFwcEFkbWluEhIuU2V0RGFwcEFkbWluSW5wdXQaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABI+Cg1TZXREYXBwQ29uZmlnEhMuU2V0RGFwcENvbmZpZ0lu",
            "cHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASKwoLR2V0RGFwcEluZm8S",
            "Ci5hZWxmLkhhc2gaCS5EYXBwSW5mbyIFiIn3AQESQAoQR2V0UmV3YXJkQWRk",
            "cmVzcxIWLkdldFJld2FyZEFkZHJlc3NJbnB1dBoNLmFlbGYuQWRkcmVzcyIF",
            "iIn3AQESLgoFQ2xhaW0SCy5DbGFpbUlucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASLQoMR2V0Q2xhaW1JbmZvEgouYWVsZi5IYXNoGgouQ2xhaW1J",
            "bmZvIgWIifcBARI0CghXaXRoZHJhdxIOLldpdGhkcmF3SW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABI8CgxTdGFrZVJld2FyZHMSEi5TdGFrZVJl",
            "d2FyZHNJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkwKFEFkZExp",
            "cXVpZGl0eUFuZFN0YWtlEhouQWRkTGlxdWlkaXR5QW5kU3Rha2VJbnB1dBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkIKD1JlbW92ZUxpcXVpZGl0eRIV",
            "LlJlbW92ZUxpcXVpZGl0eUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASQAoOU3Rha2VMaXF1aWRpdHkSFC5TdGFrZUxpcXVpZGl0eUlucHV0GhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNQoQR2V0TGlxdWlkaXR5SW5mbxIK",
            "LmFlbGYuSGFzaBoOLkxpcXVpZGl0eUluZm8iBYiJ9wEBEiwKBEpvaW4SCi5K",
            "b2luSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJACg5BY2NlcHRS",
            "ZWZlcnJhbBIULkFjY2VwdFJlZmVycmFsSW5wdXQaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABI6CgtCYXRjaFNldHRsZRIRLkJhdGNoU2V0dGxlSW5wdXQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIyCgdKb2luRm9yEg0uSm9pbkZv",
            "cklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASUgoXU2V0UG9pbnRz",
            "Q29udHJhY3RDb25maWcSHS5TZXRQb2ludHNDb250cmFjdENvbmZpZ0lucHV0",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASWAoXR2V0UG9pbnRzQ29udHJh",
            "Y3RDb25maWcSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaHi5HZXRQb2ludHND",
            "b250cmFjdENvbmZpZ091dHB1dCIFiIn3AQESQQoNR2V0Sm9pblJlY29yZBIN",
            "LmFlbGYuQWRkcmVzcxoaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUiBYiJ",
            "9wEBGkrKyvYBC2FjczEyLnByb3Rvssz2ATVFY29FYXJuLkNvbnRyYWN0cy5S",
            "ZXdhcmRzLkVjb0Vhcm5SZXdhcmRzQ29udHJhY3RTdGF0ZUIcqgIZRWNvRWFy",
            "bi5Db250cmFjdHMuUmV3YXJkc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::AElf.Standards.ACS12.Acs12Reflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.InitializeInput), global::EcoEarn.Contracts.Rewards.InitializeInput.Parser, new[]{ "Admin", "EcoearnPointsContract", "EcoearnTokensContract", "PointsContract", "UpdateAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.Config), global::EcoEarn.Contracts.Rewards.Config.Parser, new[]{ "DefaultUpdateAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.RegisterInput), global::EcoEarn.Contracts.Rewards.RegisterInput.Parser, new[]{ "DappId", "Admin", "UpdateAddress", "Domain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.DappConfig), global::EcoEarn.Contracts.Rewards.DappConfig.Parser, new[]{ "UpdateAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.DappInfo), global::EcoEarn.Contracts.Rewards.DappInfo.Parser, new[]{ "DappId", "Admin", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.GetRewardAddressInput), global::EcoEarn.Contracts.Rewards.GetRewardAddressInput.Parser, new[]{ "DappId", "Account" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.ClaimInput), global::EcoEarn.Contracts.Rewards.ClaimInput.Parser, new[]{ "DappId", "PoolId", "Account", "Symbol", "Amount", "ReleasePeriods", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.ClaimInfo), global::EcoEarn.Contracts.Rewards.ClaimInfo.Parser, new[]{ "ClaimId", "PoolId", "ClaimedAmount", "ClaimedSymbol", "ClaimedBlockNumber", "Account", "ClaimedTime", "ReleaseTime", "Seed", "ContractAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.ClaimInfos), global::EcoEarn.Contracts.Rewards.ClaimInfos.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.WithdrawInput), global::EcoEarn.Contracts.Rewards.WithdrawInput.Parser, new[]{ "ClaimIds", "Account", "Amount", "Seed", "ExpirationTime", "DappId", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.StakeInput), global::EcoEarn.Contracts.Rewards.StakeInput.Parser, new[]{ "ClaimIds", "Account", "Amount", "Seed", "ExpirationTime", "PoolId", "Period", "DappId", "LongestReleaseTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.StakeRewardsInput), global::EcoEarn.Contracts.Rewards.StakeRewardsInput.Parser, new[]{ "StakeInput", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.SetDappAdminInput), global::EcoEarn.Contracts.Rewards.SetDappAdminInput.Parser, new[]{ "DappId", "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.SetDappConfigInput), global::EcoEarn.Contracts.Rewards.SetDappConfigInput.Parser, new[]{ "DappId", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.HashList), global::EcoEarn.Contracts.Rewards.HashList.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.AddLiquidityAndStakeInput), global::EcoEarn.Contracts.Rewards.AddLiquidityAndStakeInput.Parser, new[]{ "StakeInput", "TokenAMin", "TokenBMin", "Deadline", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.RemoveLiquidityInput), global::EcoEarn.Contracts.Rewards.RemoveLiquidityInput.Parser, new[]{ "LiquidityInput", "TokenAMin", "TokenBMin", "Deadline", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.StakeLiquidityInput), global::EcoEarn.Contracts.Rewards.StakeLiquidityInput.Parser, new[]{ "LiquidityInput", "PoolId", "Period", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityInput), global::EcoEarn.Contracts.Rewards.LiquidityInput.Parser, new[]{ "LiquidityIds", "LpAmount", "DappId", "Seed", "ExpirationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityInfo), global::EcoEarn.Contracts.Rewards.LiquidityInfo.Parser, new[]{ "LiquidityId", "Seed", "LpAmount", "LpSymbol", "RewardSymbol", "TokenAAmount", "TokenASymbol", "TokenBAmount", "TokenBSymbol", "AddedTime", "DappId", "SwapAddress", "TokenAddress", "Account" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityInfos), global::EcoEarn.Contracts.Rewards.LiquidityInfos.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.AcceptReferralInput), global::EcoEarn.Contracts.Rewards.AcceptReferralInput.Parser, new[]{ "Referrer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.BatchSettleInput), global::EcoEarn.Contracts.Rewards.BatchSettleInput.Parser, new[]{ "ActionName", "UserPointsList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.UserPoints), global::EcoEarn.Contracts.Rewards.UserPoints.Parser, new[]{ "UserAddress", "UserPointsValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.SetPointsContractConfigInput), global::EcoEarn.Contracts.Rewards.SetPointsContractConfigInput.Parser, new[]{ "DappId", "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.GetPointsContractConfigOutput), global::EcoEarn.Contracts.Rewards.GetPointsContractConfigOutput.Parser, new[]{ "PointsContract", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.PointsContractConfig), global::EcoEarn.Contracts.Rewards.PointsContractConfig.Parser, new[]{ "DappId", "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.JoinInput), global::EcoEarn.Contracts.Rewards.JoinInput.Parser, new[]{ "Domain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.JoinForInput), global::EcoEarn.Contracts.Rewards.JoinForInput.Parser, new[]{ "Domain", "Registrant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.ConfigSet), global::EcoEarn.Contracts.Rewards.ConfigSet.Parser, new[]{ "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.AdminSet), global::EcoEarn.Contracts.Rewards.AdminSet.Parser, new[]{ "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.Registered), global::EcoEarn.Contracts.Rewards.Registered.Parser, new[]{ "DappId", "Admin", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.DappConfigSet), global::EcoEarn.Contracts.Rewards.DappConfigSet.Parser, new[]{ "DappId", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.Claimed), global::EcoEarn.Contracts.Rewards.Claimed.Parser, new[]{ "ClaimInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.DappAdminSet), global::EcoEarn.Contracts.Rewards.DappAdminSet.Parser, new[]{ "DappId", "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.Withdrawn), global::EcoEarn.Contracts.Rewards.Withdrawn.Parser, new[]{ "ClaimIds", "Account", "Amount", "Seed", "DappId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.RewardsStaked), global::EcoEarn.Contracts.Rewards.RewardsStaked.Parser, new[]{ "ClaimIds", "Account", "Amount", "Seed", "PoolId", "Period", "DappId", "StakeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityAdded), global::EcoEarn.Contracts.Rewards.LiquidityAdded.Parser, new[]{ "ClaimIds", "Account", "Amount", "PoolId", "Period", "StakeId", "LiquidityInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityRemoved), global::EcoEarn.Contracts.Rewards.LiquidityRemoved.Parser, new[]{ "LiquidityIds", "LpAmount", "TokenAAmount", "TokenBAmount", "DappId", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.LiquidityStaked), global::EcoEarn.Contracts.Rewards.LiquidityStaked.Parser, new[]{ "LiquidityIds", "PoolId", "LpAmount", "Period", "StakeId", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.Joined), global::EcoEarn.Contracts.Rewards.Joined.Parser, new[]{ "Domain", "Registrant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.ReferralAccepted), global::EcoEarn.Contracts.Rewards.ReferralAccepted.Parser, new[]{ "Referrer", "Invitee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EcoEarn.Contracts.Rewards.PointsContractConfigSet), global::EcoEarn.Contracts.Rewards.PointsContractConfigSet.Parser, new[]{ "PointsContract", "Config" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      ecoearnPointsContract_ = other.ecoearnPointsContract_ != null ? other.ecoearnPointsContract_.Clone() : null;
      ecoearnTokensContract_ = other.ecoearnTokensContract_ != null ? other.ecoearnTokensContract_.Clone() : null;
      pointsContract_ = other.pointsContract_ != null ? other.pointsContract_.Clone() : null;
      updateAddress_ = other.updateAddress_ != null ? other.updateAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 1;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "ecoearn_points_contract" field.</summary>
    public const int EcoearnPointsContractFieldNumber = 2;
    private global::AElf.Types.Address ecoearnPointsContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address EcoearnPointsContract {
      get { return ecoearnPointsContract_; }
      set {
        ecoearnPointsContract_ = value;
      }
    }

    /// <summary>Field number for the "ecoearn_tokens_contract" field.</summary>
    public const int EcoearnTokensContractFieldNumber = 3;
    private global::AElf.Types.Address ecoearnTokensContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address EcoearnTokensContract {
      get { return ecoearnTokensContract_; }
      set {
        ecoearnTokensContract_ = value;
      }
    }

    /// <summary>Field number for the "points_contract" field.</summary>
    public const int PointsContractFieldNumber = 4;
    private global::AElf.Types.Address pointsContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address PointsContract {
      get { return pointsContract_; }
      set {
        pointsContract_ = value;
      }
    }

    /// <summary>Field number for the "update_address" field.</summary>
    public const int UpdateAddressFieldNumber = 5;
    private global::AElf.Types.Address updateAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address UpdateAddress {
      get { return updateAddress_; }
      set {
        updateAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Admin, other.Admin)) return false;
      if (!object.Equals(EcoearnPointsContract, other.EcoearnPointsContract)) return false;
      if (!object.Equals(EcoearnTokensContract, other.EcoearnTokensContract)) return false;
      if (!object.Equals(PointsContract, other.PointsContract)) return false;
      if (!object.Equals(UpdateAddress, other.UpdateAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (ecoearnPointsContract_ != null) hash ^= EcoearnPointsContract.GetHashCode();
      if (ecoearnTokensContract_ != null) hash ^= EcoearnTokensContract.GetHashCode();
      if (pointsContract_ != null) hash ^= PointsContract.GetHashCode();
      if (updateAddress_ != null) hash ^= UpdateAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (admin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Admin);
      }
      if (ecoearnPointsContract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EcoearnPointsContract);
      }
      if (ecoearnTokensContract_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EcoearnTokensContract);
      }
      if (pointsContract_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PointsContract);
      }
      if (updateAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (ecoearnPointsContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EcoearnPointsContract);
      }
      if (ecoearnTokensContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EcoearnTokensContract);
      }
      if (pointsContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointsContract);
      }
      if (updateAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.ecoearnPointsContract_ != null) {
        if (ecoearnPointsContract_ == null) {
          EcoearnPointsContract = new global::AElf.Types.Address();
        }
        EcoearnPointsContract.MergeFrom(other.EcoearnPointsContract);
      }
      if (other.ecoearnTokensContract_ != null) {
        if (ecoearnTokensContract_ == null) {
          EcoearnTokensContract = new global::AElf.Types.Address();
        }
        EcoearnTokensContract.MergeFrom(other.EcoearnTokensContract);
      }
      if (other.pointsContract_ != null) {
        if (pointsContract_ == null) {
          PointsContract = new global::AElf.Types.Address();
        }
        PointsContract.MergeFrom(other.PointsContract);
      }
      if (other.updateAddress_ != null) {
        if (updateAddress_ == null) {
          UpdateAddress = new global::AElf.Types.Address();
        }
        UpdateAddress.MergeFrom(other.UpdateAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 18: {
            if (ecoearnPointsContract_ == null) {
              EcoearnPointsContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(EcoearnPointsContract);
            break;
          }
          case 26: {
            if (ecoearnTokensContract_ == null) {
              EcoearnTokensContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(EcoearnTokensContract);
            break;
          }
          case 34: {
            if (pointsContract_ == null) {
              PointsContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(PointsContract);
            break;
          }
          case 42: {
            if (updateAddress_ == null) {
              UpdateAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(UpdateAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      defaultUpdateAddress_ = other.defaultUpdateAddress_ != null ? other.defaultUpdateAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "default_update_address" field.</summary>
    public const int DefaultUpdateAddressFieldNumber = 1;
    private global::AElf.Types.Address defaultUpdateAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DefaultUpdateAddress {
      get { return defaultUpdateAddress_; }
      set {
        defaultUpdateAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DefaultUpdateAddress, other.DefaultUpdateAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (defaultUpdateAddress_ != null) hash ^= DefaultUpdateAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (defaultUpdateAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DefaultUpdateAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (defaultUpdateAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultUpdateAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.defaultUpdateAddress_ != null) {
        if (defaultUpdateAddress_ == null) {
          DefaultUpdateAddress = new global::AElf.Types.Address();
        }
        DefaultUpdateAddress.MergeFrom(other.DefaultUpdateAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (defaultUpdateAddress_ == null) {
              DefaultUpdateAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DefaultUpdateAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterInput : pb::IMessage<RegisterInput> {
    private static readonly pb::MessageParser<RegisterInput> _parser = new pb::MessageParser<RegisterInput>(() => new RegisterInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterInput(RegisterInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      updateAddress_ = other.updateAddress_ != null ? other.updateAddress_.Clone() : null;
      domain_ = other.domain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterInput Clone() {
      return new RegisterInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "update_address" field.</summary>
    public const int UpdateAddressFieldNumber = 3;
    private global::AElf.Types.Address updateAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address UpdateAddress {
      get { return updateAddress_; }
      set {
        updateAddress_ = value;
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 4;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      if (!object.Equals(UpdateAddress, other.UpdateAddress)) return false;
      if (Domain != other.Domain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (updateAddress_ != null) hash ^= UpdateAddress.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (updateAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateAddress);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Domain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (updateAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateAddress);
      }
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.updateAddress_ != null) {
        if (updateAddress_ == null) {
          UpdateAddress = new global::AElf.Types.Address();
        }
        UpdateAddress.MergeFrom(other.UpdateAddress);
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 26: {
            if (updateAddress_ == null) {
              UpdateAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(UpdateAddress);
            break;
          }
          case 34: {
            Domain = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DappConfig : pb::IMessage<DappConfig> {
    private static readonly pb::MessageParser<DappConfig> _parser = new pb::MessageParser<DappConfig>(() => new DappConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DappConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfig(DappConfig other) : this() {
      updateAddress_ = other.updateAddress_ != null ? other.updateAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfig Clone() {
      return new DappConfig(this);
    }

    /// <summary>Field number for the "update_address" field.</summary>
    public const int UpdateAddressFieldNumber = 1;
    private global::AElf.Types.Address updateAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address UpdateAddress {
      get { return updateAddress_; }
      set {
        updateAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DappConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DappConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpdateAddress, other.UpdateAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateAddress_ != null) hash ^= UpdateAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpdateAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DappConfig other) {
      if (other == null) {
        return;
      }
      if (other.updateAddress_ != null) {
        if (updateAddress_ == null) {
          UpdateAddress = new global::AElf.Types.Address();
        }
        UpdateAddress.MergeFrom(other.UpdateAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (updateAddress_ == null) {
              UpdateAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(UpdateAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DappInfo : pb::IMessage<DappInfo> {
    private static readonly pb::MessageParser<DappInfo> _parser = new pb::MessageParser<DappInfo>(() => new DappInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DappInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappInfo(DappInfo other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappInfo Clone() {
      return new DappInfo(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::EcoEarn.Contracts.Rewards.DappConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.DappConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DappInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DappInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DappInfo other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRewardAddressInput : pb::IMessage<GetRewardAddressInput> {
    private static readonly pb::MessageParser<GetRewardAddressInput> _parser = new pb::MessageParser<GetRewardAddressInput>(() => new GetRewardAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRewardAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardAddressInput(GetRewardAddressInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardAddressInput Clone() {
      return new GetRewardAddressInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRewardAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRewardAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRewardAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimInput : pb::IMessage<ClaimInput> {
    private static readonly pb::MessageParser<ClaimInput> _parser = new pb::MessageParser<ClaimInput>(() => new ClaimInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInput(ClaimInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      releasePeriods_ = other.releasePeriods_.Clone();
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInput Clone() {
      return new ClaimInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 2;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "release_periods" field.</summary>
    public const int ReleasePeriodsFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_releasePeriods_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> releasePeriods_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ReleasePeriods {
      get { return releasePeriods_; }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 7;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if(!releasePeriods_.Equals(other.releasePeriods_)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      hash ^= releasePeriods_.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (poolId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PoolId);
      }
      if (account_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Account);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Amount);
      }
      releasePeriods_.WriteTo(output, _repeated_releasePeriods_codec);
      if (seed_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      size += releasePeriods_.CalculateSize(_repeated_releasePeriods_codec);
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      releasePeriods_.Add(other.releasePeriods_);
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 26: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            releasePeriods_.AddEntriesFrom(input, _repeated_releasePeriods_codec);
            break;
          }
          case 58: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimInfo : pb::IMessage<ClaimInfo> {
    private static readonly pb::MessageParser<ClaimInfo> _parser = new pb::MessageParser<ClaimInfo>(() => new ClaimInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfo(ClaimInfo other) : this() {
      claimId_ = other.claimId_ != null ? other.claimId_.Clone() : null;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      claimedAmount_ = other.claimedAmount_;
      claimedSymbol_ = other.claimedSymbol_;
      claimedBlockNumber_ = other.claimedBlockNumber_;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      claimedTime_ = other.claimedTime_ != null ? other.claimedTime_.Clone() : null;
      releaseTime_ = other.releaseTime_ != null ? other.releaseTime_.Clone() : null;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfo Clone() {
      return new ClaimInfo(this);
    }

    /// <summary>Field number for the "claim_id" field.</summary>
    public const int ClaimIdFieldNumber = 1;
    private global::AElf.Types.Hash claimId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash ClaimId {
      get { return claimId_; }
      set {
        claimId_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 2;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "claimed_amount" field.</summary>
    public const int ClaimedAmountFieldNumber = 3;
    private long claimedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClaimedAmount {
      get { return claimedAmount_; }
      set {
        claimedAmount_ = value;
      }
    }

    /// <summary>Field number for the "claimed_symbol" field.</summary>
    public const int ClaimedSymbolFieldNumber = 4;
    private string claimedSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClaimedSymbol {
      get { return claimedSymbol_; }
      set {
        claimedSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claimed_block_number" field.</summary>
    public const int ClaimedBlockNumberFieldNumber = 5;
    private long claimedBlockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClaimedBlockNumber {
      get { return claimedBlockNumber_; }
      set {
        claimedBlockNumber_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "claimed_time" field.</summary>
    public const int ClaimedTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp claimedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClaimedTime {
      get { return claimedTime_; }
      set {
        claimedTime_ = value;
      }
    }

    /// <summary>Field number for the "release_time" field.</summary>
    public const int ReleaseTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releaseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleaseTime {
      get { return releaseTime_; }
      set {
        releaseTime_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 9;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 10;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClaimId, other.ClaimId)) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (ClaimedAmount != other.ClaimedAmount) return false;
      if (ClaimedSymbol != other.ClaimedSymbol) return false;
      if (ClaimedBlockNumber != other.ClaimedBlockNumber) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(ClaimedTime, other.ClaimedTime)) return false;
      if (!object.Equals(ReleaseTime, other.ReleaseTime)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (claimId_ != null) hash ^= ClaimId.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (ClaimedAmount != 0L) hash ^= ClaimedAmount.GetHashCode();
      if (ClaimedSymbol.Length != 0) hash ^= ClaimedSymbol.GetHashCode();
      if (ClaimedBlockNumber != 0L) hash ^= ClaimedBlockNumber.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (claimedTime_ != null) hash ^= ClaimedTime.GetHashCode();
      if (releaseTime_ != null) hash ^= ReleaseTime.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (claimId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClaimId);
      }
      if (poolId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PoolId);
      }
      if (ClaimedAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ClaimedAmount);
      }
      if (ClaimedSymbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClaimedSymbol);
      }
      if (ClaimedBlockNumber != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ClaimedBlockNumber);
      }
      if (account_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Account);
      }
      if (claimedTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ClaimedTime);
      }
      if (releaseTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ReleaseTime);
      }
      if (seed_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Seed);
      }
      if (contractAddress_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ContractAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (claimId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimId);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (ClaimedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClaimedAmount);
      }
      if (ClaimedSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClaimedSymbol);
      }
      if (ClaimedBlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClaimedBlockNumber);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (claimedTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimedTime);
      }
      if (releaseTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReleaseTime);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimInfo other) {
      if (other == null) {
        return;
      }
      if (other.claimId_ != null) {
        if (claimId_ == null) {
          ClaimId = new global::AElf.Types.Hash();
        }
        ClaimId.MergeFrom(other.ClaimId);
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.ClaimedAmount != 0L) {
        ClaimedAmount = other.ClaimedAmount;
      }
      if (other.ClaimedSymbol.Length != 0) {
        ClaimedSymbol = other.ClaimedSymbol;
      }
      if (other.ClaimedBlockNumber != 0L) {
        ClaimedBlockNumber = other.ClaimedBlockNumber;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.claimedTime_ != null) {
        if (claimedTime_ == null) {
          ClaimedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClaimedTime.MergeFrom(other.ClaimedTime);
      }
      if (other.releaseTime_ != null) {
        if (releaseTime_ == null) {
          ReleaseTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleaseTime.MergeFrom(other.ReleaseTime);
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (claimId_ == null) {
              ClaimId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(ClaimId);
            break;
          }
          case 18: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 24: {
            ClaimedAmount = input.ReadInt64();
            break;
          }
          case 34: {
            ClaimedSymbol = input.ReadString();
            break;
          }
          case 40: {
            ClaimedBlockNumber = input.ReadInt64();
            break;
          }
          case 50: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 58: {
            if (claimedTime_ == null) {
              ClaimedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClaimedTime);
            break;
          }
          case 66: {
            if (releaseTime_ == null) {
              ReleaseTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleaseTime);
            break;
          }
          case 74: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 82: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimInfos : pb::IMessage<ClaimInfos> {
    private static readonly pb::MessageParser<ClaimInfos> _parser = new pb::MessageParser<ClaimInfos>(() => new ClaimInfos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimInfos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfos(ClaimInfos other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimInfos Clone() {
      return new ClaimInfos(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EcoEarn.Contracts.Rewards.ClaimInfo> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::EcoEarn.Contracts.Rewards.ClaimInfo.Parser);
    private readonly pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.ClaimInfo> data_ = new pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.ClaimInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.ClaimInfo> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimInfos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimInfos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimInfos other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawInput : pb::IMessage<WithdrawInput> {
    private static readonly pb::MessageParser<WithdrawInput> _parser = new pb::MessageParser<WithdrawInput>(() => new WithdrawInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput(WithdrawInput other) : this() {
      claimIds_ = other.claimIds_.Clone();
      account_ = other.account_ != null ? other.account_.Clone() : null;
      amount_ = other.amount_;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      expirationTime_ = other.expirationTime_;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput Clone() {
      return new WithdrawInput(this);
    }

    /// <summary>Field number for the "claim_ids" field.</summary>
    public const int ClaimIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_claimIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> claimIds_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> ClaimIds {
      get { return claimIds_; }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 5;
    private long expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 6;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!claimIds_.Equals(other.claimIds_)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= claimIds_.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      claimIds_.WriteTo(output, _repeated_claimIds_codec);
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (seed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Seed);
      }
      if (ExpirationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpirationTime);
      }
      if (dappId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DappId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += claimIds_.CalculateSize(_repeated_claimIds_codec);
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (ExpirationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawInput other) {
      if (other == null) {
        return;
      }
      claimIds_.Add(other.claimIds_);
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            claimIds_.AddEntriesFrom(input, _repeated_claimIds_codec);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 40: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 50: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StakeInput : pb::IMessage<StakeInput> {
    private static readonly pb::MessageParser<StakeInput> _parser = new pb::MessageParser<StakeInput>(() => new StakeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StakeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInput(StakeInput other) : this() {
      claimIds_ = other.claimIds_.Clone();
      account_ = other.account_ != null ? other.account_.Clone() : null;
      amount_ = other.amount_;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      expirationTime_ = other.expirationTime_;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      period_ = other.period_;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      longestReleaseTime_ = other.longestReleaseTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInput Clone() {
      return new StakeInput(this);
    }

    /// <summary>Field number for the "claim_ids" field.</summary>
    public const int ClaimIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_claimIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> claimIds_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> ClaimIds {
      get { return claimIds_; }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 5;
    private long expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 6;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 7;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 8;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "longest_release_time" field.</summary>
    public const int LongestReleaseTimeFieldNumber = 9;
    private long longestReleaseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongestReleaseTime {
      get { return longestReleaseTime_; }
      set {
        longestReleaseTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StakeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StakeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!claimIds_.Equals(other.claimIds_)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (Period != other.Period) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (LongestReleaseTime != other.LongestReleaseTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= claimIds_.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (LongestReleaseTime != 0L) hash ^= LongestReleaseTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      claimIds_.WriteTo(output, _repeated_claimIds_codec);
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (seed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Seed);
      }
      if (ExpirationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpirationTime);
      }
      if (poolId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PoolId);
      }
      if (Period != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Period);
      }
      if (dappId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DappId);
      }
      if (LongestReleaseTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LongestReleaseTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += claimIds_.CalculateSize(_repeated_claimIds_codec);
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (ExpirationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (LongestReleaseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongestReleaseTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StakeInput other) {
      if (other == null) {
        return;
      }
      claimIds_.Add(other.claimIds_);
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.LongestReleaseTime != 0L) {
        LongestReleaseTime = other.LongestReleaseTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            claimIds_.AddEntriesFrom(input, _repeated_claimIds_codec);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 40: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 50: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 56: {
            Period = input.ReadInt64();
            break;
          }
          case 66: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 72: {
            LongestReleaseTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StakeRewardsInput : pb::IMessage<StakeRewardsInput> {
    private static readonly pb::MessageParser<StakeRewardsInput> _parser = new pb::MessageParser<StakeRewardsInput>(() => new StakeRewardsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StakeRewardsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeRewardsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeRewardsInput(StakeRewardsInput other) : this() {
      stakeInput_ = other.stakeInput_ != null ? other.stakeInput_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeRewardsInput Clone() {
      return new StakeRewardsInput(this);
    }

    /// <summary>Field number for the "stake_input" field.</summary>
    public const int StakeInputFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.StakeInput stakeInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.StakeInput StakeInput {
      get { return stakeInput_; }
      set {
        stakeInput_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StakeRewardsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StakeRewardsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StakeInput, other.StakeInput)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stakeInput_ != null) hash ^= StakeInput.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stakeInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StakeInput);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stakeInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StakeInput);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StakeRewardsInput other) {
      if (other == null) {
        return;
      }
      if (other.stakeInput_ != null) {
        if (stakeInput_ == null) {
          StakeInput = new global::EcoEarn.Contracts.Rewards.StakeInput();
        }
        StakeInput.MergeFrom(other.StakeInput);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stakeInput_ == null) {
              StakeInput = new global::EcoEarn.Contracts.Rewards.StakeInput();
            }
            input.ReadMessage(StakeInput);
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDappAdminInput : pb::IMessage<SetDappAdminInput> {
    private static readonly pb::MessageParser<SetDappAdminInput> _parser = new pb::MessageParser<SetDappAdminInput>(() => new SetDappAdminInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDappAdminInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappAdminInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappAdminInput(SetDappAdminInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappAdminInput Clone() {
      return new SetDappAdminInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDappAdminInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDappAdminInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDappAdminInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDappConfigInput : pb::IMessage<SetDappConfigInput> {
    private static readonly pb::MessageParser<SetDappConfigInput> _parser = new pb::MessageParser<SetDappConfigInput>(() => new SetDappConfigInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDappConfigInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappConfigInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappConfigInput(SetDappConfigInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDappConfigInput Clone() {
      return new SetDappConfigInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::EcoEarn.Contracts.Rewards.DappConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.DappConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDappConfigInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDappConfigInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDappConfigInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashList : pb::IMessage<HashList> {
    private static readonly pb::MessageParser<HashList> _parser = new pb::MessageParser<HashList>(() => new HashList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList(HashList other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList Clone() {
      return new HashList(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> data_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashList other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddLiquidityAndStakeInput : pb::IMessage<AddLiquidityAndStakeInput> {
    private static readonly pb::MessageParser<AddLiquidityAndStakeInput> _parser = new pb::MessageParser<AddLiquidityAndStakeInput>(() => new AddLiquidityAndStakeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLiquidityAndStakeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityAndStakeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityAndStakeInput(AddLiquidityAndStakeInput other) : this() {
      stakeInput_ = other.stakeInput_ != null ? other.stakeInput_.Clone() : null;
      tokenAMin_ = other.tokenAMin_;
      tokenBMin_ = other.tokenBMin_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityAndStakeInput Clone() {
      return new AddLiquidityAndStakeInput(this);
    }

    /// <summary>Field number for the "stake_input" field.</summary>
    public const int StakeInputFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.StakeInput stakeInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.StakeInput StakeInput {
      get { return stakeInput_; }
      set {
        stakeInput_ = value;
      }
    }

    /// <summary>Field number for the "token_a_min" field.</summary>
    public const int TokenAMinFieldNumber = 2;
    private long tokenAMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenAMin {
      get { return tokenAMin_; }
      set {
        tokenAMin_ = value;
      }
    }

    /// <summary>Field number for the "token_b_min" field.</summary>
    public const int TokenBMinFieldNumber = 3;
    private long tokenBMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenBMin {
      get { return tokenBMin_; }
      set {
        tokenBMin_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLiquidityAndStakeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLiquidityAndStakeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StakeInput, other.StakeInput)) return false;
      if (TokenAMin != other.TokenAMin) return false;
      if (TokenBMin != other.TokenBMin) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stakeInput_ != null) hash ^= StakeInput.GetHashCode();
      if (TokenAMin != 0L) hash ^= TokenAMin.GetHashCode();
      if (TokenBMin != 0L) hash ^= TokenBMin.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stakeInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StakeInput);
      }
      if (TokenAMin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TokenAMin);
      }
      if (TokenBMin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TokenBMin);
      }
      if (deadline_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Deadline);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stakeInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StakeInput);
      }
      if (TokenAMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenAMin);
      }
      if (TokenBMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenBMin);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLiquidityAndStakeInput other) {
      if (other == null) {
        return;
      }
      if (other.stakeInput_ != null) {
        if (stakeInput_ == null) {
          StakeInput = new global::EcoEarn.Contracts.Rewards.StakeInput();
        }
        StakeInput.MergeFrom(other.StakeInput);
      }
      if (other.TokenAMin != 0L) {
        TokenAMin = other.TokenAMin;
      }
      if (other.TokenBMin != 0L) {
        TokenBMin = other.TokenBMin;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stakeInput_ == null) {
              StakeInput = new global::EcoEarn.Contracts.Rewards.StakeInput();
            }
            input.ReadMessage(StakeInput);
            break;
          }
          case 16: {
            TokenAMin = input.ReadInt64();
            break;
          }
          case 24: {
            TokenBMin = input.ReadInt64();
            break;
          }
          case 34: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveLiquidityInput : pb::IMessage<RemoveLiquidityInput> {
    private static readonly pb::MessageParser<RemoveLiquidityInput> _parser = new pb::MessageParser<RemoveLiquidityInput>(() => new RemoveLiquidityInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveLiquidityInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput(RemoveLiquidityInput other) : this() {
      liquidityInput_ = other.liquidityInput_ != null ? other.liquidityInput_.Clone() : null;
      tokenAMin_ = other.tokenAMin_;
      tokenBMin_ = other.tokenBMin_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput Clone() {
      return new RemoveLiquidityInput(this);
    }

    /// <summary>Field number for the "liquidity_input" field.</summary>
    public const int LiquidityInputFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.LiquidityInput liquidityInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.LiquidityInput LiquidityInput {
      get { return liquidityInput_; }
      set {
        liquidityInput_ = value;
      }
    }

    /// <summary>Field number for the "token_a_min" field.</summary>
    public const int TokenAMinFieldNumber = 2;
    private long tokenAMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenAMin {
      get { return tokenAMin_; }
      set {
        tokenAMin_ = value;
      }
    }

    /// <summary>Field number for the "token_b_min" field.</summary>
    public const int TokenBMinFieldNumber = 3;
    private long tokenBMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenBMin {
      get { return tokenBMin_; }
      set {
        tokenBMin_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveLiquidityInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveLiquidityInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidityInput, other.LiquidityInput)) return false;
      if (TokenAMin != other.TokenAMin) return false;
      if (TokenBMin != other.TokenBMin) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidityInput_ != null) hash ^= LiquidityInput.GetHashCode();
      if (TokenAMin != 0L) hash ^= TokenAMin.GetHashCode();
      if (TokenBMin != 0L) hash ^= TokenBMin.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (liquidityInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LiquidityInput);
      }
      if (TokenAMin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TokenAMin);
      }
      if (TokenBMin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TokenBMin);
      }
      if (deadline_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Deadline);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidityInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityInput);
      }
      if (TokenAMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenAMin);
      }
      if (TokenBMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenBMin);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveLiquidityInput other) {
      if (other == null) {
        return;
      }
      if (other.liquidityInput_ != null) {
        if (liquidityInput_ == null) {
          LiquidityInput = new global::EcoEarn.Contracts.Rewards.LiquidityInput();
        }
        LiquidityInput.MergeFrom(other.LiquidityInput);
      }
      if (other.TokenAMin != 0L) {
        TokenAMin = other.TokenAMin;
      }
      if (other.TokenBMin != 0L) {
        TokenBMin = other.TokenBMin;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (liquidityInput_ == null) {
              LiquidityInput = new global::EcoEarn.Contracts.Rewards.LiquidityInput();
            }
            input.ReadMessage(LiquidityInput);
            break;
          }
          case 16: {
            TokenAMin = input.ReadInt64();
            break;
          }
          case 24: {
            TokenBMin = input.ReadInt64();
            break;
          }
          case 34: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StakeLiquidityInput : pb::IMessage<StakeLiquidityInput> {
    private static readonly pb::MessageParser<StakeLiquidityInput> _parser = new pb::MessageParser<StakeLiquidityInput>(() => new StakeLiquidityInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StakeLiquidityInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeLiquidityInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeLiquidityInput(StakeLiquidityInput other) : this() {
      liquidityInput_ = other.liquidityInput_ != null ? other.liquidityInput_.Clone() : null;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      period_ = other.period_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeLiquidityInput Clone() {
      return new StakeLiquidityInput(this);
    }

    /// <summary>Field number for the "liquidity_input" field.</summary>
    public const int LiquidityInputFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.LiquidityInput liquidityInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.LiquidityInput LiquidityInput {
      get { return liquidityInput_; }
      set {
        liquidityInput_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 2;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StakeLiquidityInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StakeLiquidityInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidityInput, other.LiquidityInput)) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (Period != other.Period) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidityInput_ != null) hash ^= LiquidityInput.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (liquidityInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LiquidityInput);
      }
      if (poolId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PoolId);
      }
      if (Period != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Period);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidityInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityInput);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StakeLiquidityInput other) {
      if (other == null) {
        return;
      }
      if (other.liquidityInput_ != null) {
        if (liquidityInput_ == null) {
          LiquidityInput = new global::EcoEarn.Contracts.Rewards.LiquidityInput();
        }
        LiquidityInput.MergeFrom(other.LiquidityInput);
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (liquidityInput_ == null) {
              LiquidityInput = new global::EcoEarn.Contracts.Rewards.LiquidityInput();
            }
            input.ReadMessage(LiquidityInput);
            break;
          }
          case 18: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 24: {
            Period = input.ReadInt64();
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityInput : pb::IMessage<LiquidityInput> {
    private static readonly pb::MessageParser<LiquidityInput> _parser = new pb::MessageParser<LiquidityInput>(() => new LiquidityInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInput(LiquidityInput other) : this() {
      liquidityIds_ = other.liquidityIds_.Clone();
      lpAmount_ = other.lpAmount_;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      expirationTime_ = other.expirationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInput Clone() {
      return new LiquidityInput(this);
    }

    /// <summary>Field number for the "liquidity_ids" field.</summary>
    public const int LiquidityIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_liquidityIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> liquidityIds_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> LiquidityIds {
      get { return liquidityIds_; }
    }

    /// <summary>Field number for the "lp_amount" field.</summary>
    public const int LpAmountFieldNumber = 2;
    private long lpAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpAmount {
      get { return lpAmount_; }
      set {
        lpAmount_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 3;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 5;
    private long expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!liquidityIds_.Equals(other.liquidityIds_)) return false;
      if (LpAmount != other.LpAmount) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= liquidityIds_.GetHashCode();
      if (LpAmount != 0L) hash ^= LpAmount.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      liquidityIds_.WriteTo(output, _repeated_liquidityIds_codec);
      if (LpAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LpAmount);
      }
      if (dappId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DappId);
      }
      if (seed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Seed);
      }
      if (ExpirationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpirationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += liquidityIds_.CalculateSize(_repeated_liquidityIds_codec);
      if (LpAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpAmount);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (ExpirationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityInput other) {
      if (other == null) {
        return;
      }
      liquidityIds_.Add(other.liquidityIds_);
      if (other.LpAmount != 0L) {
        LpAmount = other.LpAmount;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            liquidityIds_.AddEntriesFrom(input, _repeated_liquidityIds_codec);
            break;
          }
          case 16: {
            LpAmount = input.ReadInt64();
            break;
          }
          case 26: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 34: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 40: {
            ExpirationTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityInfo : pb::IMessage<LiquidityInfo> {
    private static readonly pb::MessageParser<LiquidityInfo> _parser = new pb::MessageParser<LiquidityInfo>(() => new LiquidityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfo(LiquidityInfo other) : this() {
      liquidityId_ = other.liquidityId_ != null ? other.liquidityId_.Clone() : null;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      lpAmount_ = other.lpAmount_;
      lpSymbol_ = other.lpSymbol_;
      rewardSymbol_ = other.rewardSymbol_;
      tokenAAmount_ = other.tokenAAmount_;
      tokenASymbol_ = other.tokenASymbol_;
      tokenBAmount_ = other.tokenBAmount_;
      tokenBSymbol_ = other.tokenBSymbol_;
      addedTime_ = other.addedTime_ != null ? other.addedTime_.Clone() : null;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      swapAddress_ = other.swapAddress_ != null ? other.swapAddress_.Clone() : null;
      tokenAddress_ = other.tokenAddress_ != null ? other.tokenAddress_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfo Clone() {
      return new LiquidityInfo(this);
    }

    /// <summary>Field number for the "liquidity_id" field.</summary>
    public const int LiquidityIdFieldNumber = 1;
    private global::AElf.Types.Hash liquidityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LiquidityId {
      get { return liquidityId_; }
      set {
        liquidityId_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 2;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "lp_amount" field.</summary>
    public const int LpAmountFieldNumber = 3;
    private long lpAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpAmount {
      get { return lpAmount_; }
      set {
        lpAmount_ = value;
      }
    }

    /// <summary>Field number for the "lp_symbol" field.</summary>
    public const int LpSymbolFieldNumber = 4;
    private string lpSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpSymbol {
      get { return lpSymbol_; }
      set {
        lpSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward_symbol" field.</summary>
    public const int RewardSymbolFieldNumber = 5;
    private string rewardSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardSymbol {
      get { return rewardSymbol_; }
      set {
        rewardSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_a_amount" field.</summary>
    public const int TokenAAmountFieldNumber = 6;
    private long tokenAAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenAAmount {
      get { return tokenAAmount_; }
      set {
        tokenAAmount_ = value;
      }
    }

    /// <summary>Field number for the "token_a_symbol" field.</summary>
    public const int TokenASymbolFieldNumber = 7;
    private string tokenASymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenASymbol {
      get { return tokenASymbol_; }
      set {
        tokenASymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_b_amount" field.</summary>
    public const int TokenBAmountFieldNumber = 8;
    private long tokenBAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenBAmount {
      get { return tokenBAmount_; }
      set {
        tokenBAmount_ = value;
      }
    }

    /// <summary>Field number for the "token_b_symbol" field.</summary>
    public const int TokenBSymbolFieldNumber = 9;
    private string tokenBSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenBSymbol {
      get { return tokenBSymbol_; }
      set {
        tokenBSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "added_time" field.</summary>
    public const int AddedTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp addedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AddedTime {
      get { return addedTime_; }
      set {
        addedTime_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 11;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "swap_address" field.</summary>
    public const int SwapAddressFieldNumber = 12;
    private global::AElf.Types.Address swapAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SwapAddress {
      get { return swapAddress_; }
      set {
        swapAddress_ = value;
      }
    }

    /// <summary>Field number for the "token_address" field.</summary>
    public const int TokenAddressFieldNumber = 13;
    private global::AElf.Types.Address tokenAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address TokenAddress {
      get { return tokenAddress_; }
      set {
        tokenAddress_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 14;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidityId, other.LiquidityId)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (LpAmount != other.LpAmount) return false;
      if (LpSymbol != other.LpSymbol) return false;
      if (RewardSymbol != other.RewardSymbol) return false;
      if (TokenAAmount != other.TokenAAmount) return false;
      if (TokenASymbol != other.TokenASymbol) return false;
      if (TokenBAmount != other.TokenBAmount) return false;
      if (TokenBSymbol != other.TokenBSymbol) return false;
      if (!object.Equals(AddedTime, other.AddedTime)) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(SwapAddress, other.SwapAddress)) return false;
      if (!object.Equals(TokenAddress, other.TokenAddress)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidityId_ != null) hash ^= LiquidityId.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (LpAmount != 0L) hash ^= LpAmount.GetHashCode();
      if (LpSymbol.Length != 0) hash ^= LpSymbol.GetHashCode();
      if (RewardSymbol.Length != 0) hash ^= RewardSymbol.GetHashCode();
      if (TokenAAmount != 0L) hash ^= TokenAAmount.GetHashCode();
      if (TokenASymbol.Length != 0) hash ^= TokenASymbol.GetHashCode();
      if (TokenBAmount != 0L) hash ^= TokenBAmount.GetHashCode();
      if (TokenBSymbol.Length != 0) hash ^= TokenBSymbol.GetHashCode();
      if (addedTime_ != null) hash ^= AddedTime.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (swapAddress_ != null) hash ^= SwapAddress.GetHashCode();
      if (tokenAddress_ != null) hash ^= TokenAddress.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (liquidityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LiquidityId);
      }
      if (seed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Seed);
      }
      if (LpAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LpAmount);
      }
      if (LpSymbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LpSymbol);
      }
      if (RewardSymbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RewardSymbol);
      }
      if (TokenAAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TokenAAmount);
      }
      if (TokenASymbol.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TokenASymbol);
      }
      if (TokenBAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TokenBAmount);
      }
      if (TokenBSymbol.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TokenBSymbol);
      }
      if (addedTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AddedTime);
      }
      if (dappId_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DappId);
      }
      if (swapAddress_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SwapAddress);
      }
      if (tokenAddress_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TokenAddress);
      }
      if (account_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityId);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (LpAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpAmount);
      }
      if (LpSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpSymbol);
      }
      if (RewardSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardSymbol);
      }
      if (TokenAAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenAAmount);
      }
      if (TokenASymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenASymbol);
      }
      if (TokenBAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenBAmount);
      }
      if (TokenBSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenBSymbol);
      }
      if (addedTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddedTime);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (swapAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapAddress);
      }
      if (tokenAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenAddress);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityInfo other) {
      if (other == null) {
        return;
      }
      if (other.liquidityId_ != null) {
        if (liquidityId_ == null) {
          LiquidityId = new global::AElf.Types.Hash();
        }
        LiquidityId.MergeFrom(other.LiquidityId);
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.LpAmount != 0L) {
        LpAmount = other.LpAmount;
      }
      if (other.LpSymbol.Length != 0) {
        LpSymbol = other.LpSymbol;
      }
      if (other.RewardSymbol.Length != 0) {
        RewardSymbol = other.RewardSymbol;
      }
      if (other.TokenAAmount != 0L) {
        TokenAAmount = other.TokenAAmount;
      }
      if (other.TokenASymbol.Length != 0) {
        TokenASymbol = other.TokenASymbol;
      }
      if (other.TokenBAmount != 0L) {
        TokenBAmount = other.TokenBAmount;
      }
      if (other.TokenBSymbol.Length != 0) {
        TokenBSymbol = other.TokenBSymbol;
      }
      if (other.addedTime_ != null) {
        if (addedTime_ == null) {
          AddedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AddedTime.MergeFrom(other.AddedTime);
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.swapAddress_ != null) {
        if (swapAddress_ == null) {
          SwapAddress = new global::AElf.Types.Address();
        }
        SwapAddress.MergeFrom(other.SwapAddress);
      }
      if (other.tokenAddress_ != null) {
        if (tokenAddress_ == null) {
          TokenAddress = new global::AElf.Types.Address();
        }
        TokenAddress.MergeFrom(other.TokenAddress);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (liquidityId_ == null) {
              LiquidityId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LiquidityId);
            break;
          }
          case 18: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 24: {
            LpAmount = input.ReadInt64();
            break;
          }
          case 34: {
            LpSymbol = input.ReadString();
            break;
          }
          case 42: {
            RewardSymbol = input.ReadString();
            break;
          }
          case 48: {
            TokenAAmount = input.ReadInt64();
            break;
          }
          case 58: {
            TokenASymbol = input.ReadString();
            break;
          }
          case 64: {
            TokenBAmount = input.ReadInt64();
            break;
          }
          case 74: {
            TokenBSymbol = input.ReadString();
            break;
          }
          case 82: {
            if (addedTime_ == null) {
              AddedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AddedTime);
            break;
          }
          case 90: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 98: {
            if (swapAddress_ == null) {
              SwapAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(SwapAddress);
            break;
          }
          case 106: {
            if (tokenAddress_ == null) {
              TokenAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(TokenAddress);
            break;
          }
          case 114: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityInfos : pb::IMessage<LiquidityInfos> {
    private static readonly pb::MessageParser<LiquidityInfos> _parser = new pb::MessageParser<LiquidityInfos>(() => new LiquidityInfos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityInfos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfos(LiquidityInfos other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityInfos Clone() {
      return new LiquidityInfos(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EcoEarn.Contracts.Rewards.LiquidityInfo> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::EcoEarn.Contracts.Rewards.LiquidityInfo.Parser);
    private readonly pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.LiquidityInfo> data_ = new pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.LiquidityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.LiquidityInfo> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityInfos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityInfos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityInfos other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcceptReferralInput : pb::IMessage<AcceptReferralInput> {
    private static readonly pb::MessageParser<AcceptReferralInput> _parser = new pb::MessageParser<AcceptReferralInput>(() => new AcceptReferralInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptReferralInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptReferralInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptReferralInput(AcceptReferralInput other) : this() {
      referrer_ = other.referrer_ != null ? other.referrer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptReferralInput Clone() {
      return new AcceptReferralInput(this);
    }

    /// <summary>Field number for the "referrer" field.</summary>
    public const int ReferrerFieldNumber = 1;
    private global::AElf.Types.Address referrer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Referrer {
      get { return referrer_; }
      set {
        referrer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptReferralInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptReferralInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Referrer, other.Referrer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (referrer_ != null) hash ^= Referrer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (referrer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Referrer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (referrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Referrer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptReferralInput other) {
      if (other == null) {
        return;
      }
      if (other.referrer_ != null) {
        if (referrer_ == null) {
          Referrer = new global::AElf.Types.Address();
        }
        Referrer.MergeFrom(other.Referrer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (referrer_ == null) {
              Referrer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Referrer);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchSettleInput : pb::IMessage<BatchSettleInput> {
    private static readonly pb::MessageParser<BatchSettleInput> _parser = new pb::MessageParser<BatchSettleInput>(() => new BatchSettleInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchSettleInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSettleInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSettleInput(BatchSettleInput other) : this() {
      actionName_ = other.actionName_;
      userPointsList_ = other.userPointsList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSettleInput Clone() {
      return new BatchSettleInput(this);
    }

    /// <summary>Field number for the "action_name" field.</summary>
    public const int ActionNameFieldNumber = 1;
    private string actionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_points_list" field.</summary>
    public const int UserPointsListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::EcoEarn.Contracts.Rewards.UserPoints> _repeated_userPointsList_codec
        = pb::FieldCodec.ForMessage(18, global::EcoEarn.Contracts.Rewards.UserPoints.Parser);
    private readonly pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.UserPoints> userPointsList_ = new pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.UserPoints>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EcoEarn.Contracts.Rewards.UserPoints> UserPointsList {
      get { return userPointsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchSettleInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchSettleInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionName != other.ActionName) return false;
      if(!userPointsList_.Equals(other.userPointsList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      hash ^= userPointsList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionName);
      }
      userPointsList_.WriteTo(output, _repeated_userPointsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      size += userPointsList_.CalculateSize(_repeated_userPointsList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchSettleInput other) {
      if (other == null) {
        return;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      userPointsList_.Add(other.userPointsList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionName = input.ReadString();
            break;
          }
          case 18: {
            userPointsList_.AddEntriesFrom(input, _repeated_userPointsList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserPoints : pb::IMessage<UserPoints> {
    private static readonly pb::MessageParser<UserPoints> _parser = new pb::MessageParser<UserPoints>(() => new UserPoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPoints(UserPoints other) : this() {
      userAddress_ = other.userAddress_ != null ? other.userAddress_.Clone() : null;
      userPointsValue_ = other.userPointsValue_ != null ? other.userPointsValue_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPoints Clone() {
      return new UserPoints(this);
    }

    /// <summary>Field number for the "user_address" field.</summary>
    public const int UserAddressFieldNumber = 1;
    private global::AElf.Types.Address userAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address UserAddress {
      get { return userAddress_; }
      set {
        userAddress_ = value;
      }
    }

    /// <summary>Field number for the "user_points_value" field.</summary>
    public const int UserPointsValueFieldNumber = 2;
    private global::AElf.Types.BigIntValue userPointsValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue UserPointsValue {
      get { return userPointsValue_; }
      set {
        userPointsValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAddress, other.UserAddress)) return false;
      if (!object.Equals(UserPointsValue, other.UserPointsValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAddress_ != null) hash ^= UserAddress.GetHashCode();
      if (userPointsValue_ != null) hash ^= UserPointsValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAddress);
      }
      if (userPointsValue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserPointsValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAddress);
      }
      if (userPointsValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPointsValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPoints other) {
      if (other == null) {
        return;
      }
      if (other.userAddress_ != null) {
        if (userAddress_ == null) {
          UserAddress = new global::AElf.Types.Address();
        }
        UserAddress.MergeFrom(other.UserAddress);
      }
      if (other.userPointsValue_ != null) {
        if (userPointsValue_ == null) {
          UserPointsValue = new global::AElf.Types.BigIntValue();
        }
        UserPointsValue.MergeFrom(other.UserPointsValue);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAddress_ == null) {
              UserAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(UserAddress);
            break;
          }
          case 18: {
            if (userPointsValue_ == null) {
              UserPointsValue = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(UserPointsValue);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPointsContractConfigInput : pb::IMessage<SetPointsContractConfigInput> {
    private static readonly pb::MessageParser<SetPointsContractConfigInput> _parser = new pb::MessageParser<SetPointsContractConfigInput>(() => new SetPointsContractConfigInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPointsContractConfigInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPointsContractConfigInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPointsContractConfigInput(SetPointsContractConfigInput other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPointsContractConfigInput Clone() {
      return new SetPointsContractConfigInput(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPointsContractConfigInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPointsContractConfigInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPointsContractConfigInput other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPointsContractConfigOutput : pb::IMessage<GetPointsContractConfigOutput> {
    private static readonly pb::MessageParser<GetPointsContractConfigOutput> _parser = new pb::MessageParser<GetPointsContractConfigOutput>(() => new GetPointsContractConfigOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPointsContractConfigOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointsContractConfigOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointsContractConfigOutput(GetPointsContractConfigOutput other) : this() {
      pointsContract_ = other.pointsContract_ != null ? other.pointsContract_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointsContractConfigOutput Clone() {
      return new GetPointsContractConfigOutput(this);
    }

    /// <summary>Field number for the "points_contract" field.</summary>
    public const int PointsContractFieldNumber = 1;
    private global::AElf.Types.Address pointsContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address PointsContract {
      get { return pointsContract_; }
      set {
        pointsContract_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::EcoEarn.Contracts.Rewards.PointsContractConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.PointsContractConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPointsContractConfigOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPointsContractConfigOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PointsContract, other.PointsContract)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pointsContract_ != null) hash ^= PointsContract.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pointsContract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PointsContract);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pointsContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointsContract);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPointsContractConfigOutput other) {
      if (other == null) {
        return;
      }
      if (other.pointsContract_ != null) {
        if (pointsContract_ == null) {
          PointsContract = new global::AElf.Types.Address();
        }
        PointsContract.MergeFrom(other.PointsContract);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.PointsContractConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pointsContract_ == null) {
              PointsContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(PointsContract);
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.PointsContractConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointsContractConfig : pb::IMessage<PointsContractConfig> {
    private static readonly pb::MessageParser<PointsContractConfig> _parser = new pb::MessageParser<PointsContractConfig>(() => new PointsContractConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointsContractConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfig(PointsContractConfig other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfig Clone() {
      return new PointsContractConfig(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointsContractConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointsContractConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointsContractConfig other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinInput : pb::IMessage<JoinInput> {
    private static readonly pb::MessageParser<JoinInput> _parser = new pb::MessageParser<JoinInput>(() => new JoinInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinInput(JoinInput other) : this() {
      domain_ = other.domain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinInput Clone() {
      return new JoinInput(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinInput other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinForInput : pb::IMessage<JoinForInput> {
    private static readonly pb::MessageParser<JoinForInput> _parser = new pb::MessageParser<JoinForInput>(() => new JoinForInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinForInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinForInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinForInput(JoinForInput other) : this() {
      domain_ = other.domain_;
      registrant_ = other.registrant_ != null ? other.registrant_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinForInput Clone() {
      return new JoinForInput(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registrant" field.</summary>
    public const int RegistrantFieldNumber = 2;
    private global::AElf.Types.Address registrant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Registrant {
      get { return registrant_; }
      set {
        registrant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinForInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinForInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (!object.Equals(Registrant, other.Registrant)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (registrant_ != null) hash ^= Registrant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (registrant_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Registrant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (registrant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Registrant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinForInput other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.registrant_ != null) {
        if (registrant_ == null) {
          Registrant = new global::AElf.Types.Address();
        }
        Registrant.MergeFrom(other.Registrant);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            if (registrant_ == null) {
              Registrant = new global::AElf.Types.Address();
            }
            input.ReadMessage(Registrant);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// log event
  /// </summary>
  public sealed partial class ConfigSet : pb::IMessage<ConfigSet> {
    private static readonly pb::MessageParser<ConfigSet> _parser = new pb::MessageParser<ConfigSet>(() => new ConfigSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSet(ConfigSet other) : this() {
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSet Clone() {
      return new ConfigSet(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.Config config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.Config Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSet other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.Config();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.Config();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdminSet : pb::IMessage<AdminSet> {
    private static readonly pb::MessageParser<AdminSet> _parser = new pb::MessageParser<AdminSet>(() => new AdminSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminSet(AdminSet other) : this() {
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminSet Clone() {
      return new AdminSet(this);
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 1;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (admin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminSet other) {
      if (other == null) {
        return;
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Registered : pb::IMessage<Registered> {
    private static readonly pb::MessageParser<Registered> _parser = new pb::MessageParser<Registered>(() => new Registered());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Registered> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Registered() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Registered(Registered other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Registered Clone() {
      return new Registered(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::EcoEarn.Contracts.Rewards.DappConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.DappConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Registered);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Registered other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Registered other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DappConfigSet : pb::IMessage<DappConfigSet> {
    private static readonly pb::MessageParser<DappConfigSet> _parser = new pb::MessageParser<DappConfigSet>(() => new DappConfigSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DappConfigSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfigSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfigSet(DappConfigSet other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappConfigSet Clone() {
      return new DappConfigSet(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::EcoEarn.Contracts.Rewards.DappConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.DappConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DappConfigSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DappConfigSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DappConfigSet other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.DappConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Claimed : pb::IMessage<Claimed> {
    private static readonly pb::MessageParser<Claimed> _parser = new pb::MessageParser<Claimed>(() => new Claimed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Claimed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Claimed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Claimed(Claimed other) : this() {
      claimInfos_ = other.claimInfos_ != null ? other.claimInfos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Claimed Clone() {
      return new Claimed(this);
    }

    /// <summary>Field number for the "claim_infos" field.</summary>
    public const int ClaimInfosFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.ClaimInfos claimInfos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.ClaimInfos ClaimInfos {
      get { return claimInfos_; }
      set {
        claimInfos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Claimed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Claimed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClaimInfos, other.ClaimInfos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (claimInfos_ != null) hash ^= ClaimInfos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (claimInfos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClaimInfos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (claimInfos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimInfos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Claimed other) {
      if (other == null) {
        return;
      }
      if (other.claimInfos_ != null) {
        if (claimInfos_ == null) {
          ClaimInfos = new global::EcoEarn.Contracts.Rewards.ClaimInfos();
        }
        ClaimInfos.MergeFrom(other.ClaimInfos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (claimInfos_ == null) {
              ClaimInfos = new global::EcoEarn.Contracts.Rewards.ClaimInfos();
            }
            input.ReadMessage(ClaimInfos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DappAdminSet : pb::IMessage<DappAdminSet> {
    private static readonly pb::MessageParser<DappAdminSet> _parser = new pb::MessageParser<DappAdminSet>(() => new DappAdminSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DappAdminSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappAdminSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappAdminSet(DappAdminSet other) : this() {
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DappAdminSet Clone() {
      return new DappAdminSet(this);
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 1;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 2;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DappAdminSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DappAdminSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dappId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DappId);
      }
      if (admin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DappAdminSet other) {
      if (other == null) {
        return;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 18: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdrawn : pb::IMessage<Withdrawn> {
    private static readonly pb::MessageParser<Withdrawn> _parser = new pb::MessageParser<Withdrawn>(() => new Withdrawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdrawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdrawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdrawn(Withdrawn other) : this() {
      claimIds_ = other.claimIds_ != null ? other.claimIds_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      amount_ = other.amount_;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdrawn Clone() {
      return new Withdrawn(this);
    }

    /// <summary>Field number for the "claim_ids" field.</summary>
    public const int ClaimIdsFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.HashList claimIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.HashList ClaimIds {
      get { return claimIds_; }
      set {
        claimIds_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 5;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdrawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdrawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClaimIds, other.ClaimIds)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (claimIds_ != null) hash ^= ClaimIds.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (claimIds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClaimIds);
      }
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (seed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Seed);
      }
      if (dappId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DappId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (claimIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimIds);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdrawn other) {
      if (other == null) {
        return;
      }
      if (other.claimIds_ != null) {
        if (claimIds_ == null) {
          ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
        }
        ClaimIds.MergeFrom(other.ClaimIds);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (claimIds_ == null) {
              ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
            }
            input.ReadMessage(ClaimIds);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 42: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardsStaked : pb::IMessage<RewardsStaked> {
    private static readonly pb::MessageParser<RewardsStaked> _parser = new pb::MessageParser<RewardsStaked>(() => new RewardsStaked());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardsStaked> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsStaked() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsStaked(RewardsStaked other) : this() {
      claimIds_ = other.claimIds_ != null ? other.claimIds_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      amount_ = other.amount_;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      period_ = other.period_;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      stakeId_ = other.stakeId_ != null ? other.stakeId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsStaked Clone() {
      return new RewardsStaked(this);
    }

    /// <summary>Field number for the "claim_ids" field.</summary>
    public const int ClaimIdsFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.HashList claimIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.HashList ClaimIds {
      get { return claimIds_; }
      set {
        claimIds_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 5;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 6;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 7;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "stake_id" field.</summary>
    public const int StakeIdFieldNumber = 8;
    private global::AElf.Types.Hash stakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash StakeId {
      get { return stakeId_; }
      set {
        stakeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardsStaked);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardsStaked other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClaimIds, other.ClaimIds)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (Period != other.Period) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(StakeId, other.StakeId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (claimIds_ != null) hash ^= ClaimIds.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (stakeId_ != null) hash ^= StakeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (claimIds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClaimIds);
      }
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (seed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Seed);
      }
      if (poolId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PoolId);
      }
      if (Period != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Period);
      }
      if (dappId_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DappId);
      }
      if (stakeId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StakeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (claimIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimIds);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (stakeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StakeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardsStaked other) {
      if (other == null) {
        return;
      }
      if (other.claimIds_ != null) {
        if (claimIds_ == null) {
          ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
        }
        ClaimIds.MergeFrom(other.ClaimIds);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.stakeId_ != null) {
        if (stakeId_ == null) {
          StakeId = new global::AElf.Types.Hash();
        }
        StakeId.MergeFrom(other.StakeId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (claimIds_ == null) {
              ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
            }
            input.ReadMessage(ClaimIds);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
          case 42: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 48: {
            Period = input.ReadInt64();
            break;
          }
          case 58: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 66: {
            if (stakeId_ == null) {
              StakeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(StakeId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityAdded : pb::IMessage<LiquidityAdded> {
    private static readonly pb::MessageParser<LiquidityAdded> _parser = new pb::MessageParser<LiquidityAdded>(() => new LiquidityAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded(LiquidityAdded other) : this() {
      claimIds_ = other.claimIds_ != null ? other.claimIds_.Clone() : null;
      account_ = other.account_ != null ? other.account_.Clone() : null;
      amount_ = other.amount_;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      period_ = other.period_;
      stakeId_ = other.stakeId_ != null ? other.stakeId_.Clone() : null;
      liquidityInfo_ = other.liquidityInfo_ != null ? other.liquidityInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded Clone() {
      return new LiquidityAdded(this);
    }

    /// <summary>Field number for the "claim_ids" field.</summary>
    public const int ClaimIdsFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.HashList claimIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.HashList ClaimIds {
      get { return claimIds_; }
      set {
        claimIds_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 4;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 5;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "stake_id" field.</summary>
    public const int StakeIdFieldNumber = 6;
    private global::AElf.Types.Hash stakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash StakeId {
      get { return stakeId_; }
      set {
        stakeId_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_info" field.</summary>
    public const int LiquidityInfoFieldNumber = 7;
    private global::EcoEarn.Contracts.Rewards.LiquidityInfo liquidityInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.LiquidityInfo LiquidityInfo {
      get { return liquidityInfo_; }
      set {
        liquidityInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClaimIds, other.ClaimIds)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (Period != other.Period) return false;
      if (!object.Equals(StakeId, other.StakeId)) return false;
      if (!object.Equals(LiquidityInfo, other.LiquidityInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (claimIds_ != null) hash ^= ClaimIds.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (stakeId_ != null) hash ^= StakeId.GetHashCode();
      if (liquidityInfo_ != null) hash ^= LiquidityInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (claimIds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClaimIds);
      }
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (poolId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PoolId);
      }
      if (Period != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Period);
      }
      if (stakeId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StakeId);
      }
      if (liquidityInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LiquidityInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (claimIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimIds);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (stakeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StakeId);
      }
      if (liquidityInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityAdded other) {
      if (other == null) {
        return;
      }
      if (other.claimIds_ != null) {
        if (claimIds_ == null) {
          ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
        }
        ClaimIds.MergeFrom(other.ClaimIds);
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.stakeId_ != null) {
        if (stakeId_ == null) {
          StakeId = new global::AElf.Types.Hash();
        }
        StakeId.MergeFrom(other.StakeId);
      }
      if (other.liquidityInfo_ != null) {
        if (liquidityInfo_ == null) {
          LiquidityInfo = new global::EcoEarn.Contracts.Rewards.LiquidityInfo();
        }
        LiquidityInfo.MergeFrom(other.LiquidityInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (claimIds_ == null) {
              ClaimIds = new global::EcoEarn.Contracts.Rewards.HashList();
            }
            input.ReadMessage(ClaimIds);
            break;
          }
          case 18: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 40: {
            Period = input.ReadInt64();
            break;
          }
          case 50: {
            if (stakeId_ == null) {
              StakeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(StakeId);
            break;
          }
          case 58: {
            if (liquidityInfo_ == null) {
              LiquidityInfo = new global::EcoEarn.Contracts.Rewards.LiquidityInfo();
            }
            input.ReadMessage(LiquidityInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityRemoved : pb::IMessage<LiquidityRemoved> {
    private static readonly pb::MessageParser<LiquidityRemoved> _parser = new pb::MessageParser<LiquidityRemoved>(() => new LiquidityRemoved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityRemoved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved(LiquidityRemoved other) : this() {
      liquidityIds_ = other.liquidityIds_ != null ? other.liquidityIds_.Clone() : null;
      lpAmount_ = other.lpAmount_;
      tokenAAmount_ = other.tokenAAmount_;
      tokenBAmount_ = other.tokenBAmount_;
      dappId_ = other.dappId_ != null ? other.dappId_.Clone() : null;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved Clone() {
      return new LiquidityRemoved(this);
    }

    /// <summary>Field number for the "liquidity_ids" field.</summary>
    public const int LiquidityIdsFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.HashList liquidityIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.HashList LiquidityIds {
      get { return liquidityIds_; }
      set {
        liquidityIds_ = value;
      }
    }

    /// <summary>Field number for the "lp_amount" field.</summary>
    public const int LpAmountFieldNumber = 2;
    private long lpAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpAmount {
      get { return lpAmount_; }
      set {
        lpAmount_ = value;
      }
    }

    /// <summary>Field number for the "token_a_amount" field.</summary>
    public const int TokenAAmountFieldNumber = 3;
    private long tokenAAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenAAmount {
      get { return tokenAAmount_; }
      set {
        tokenAAmount_ = value;
      }
    }

    /// <summary>Field number for the "token_b_amount" field.</summary>
    public const int TokenBAmountFieldNumber = 4;
    private long tokenBAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenBAmount {
      get { return tokenBAmount_; }
      set {
        tokenBAmount_ = value;
      }
    }

    /// <summary>Field number for the "dapp_id" field.</summary>
    public const int DappIdFieldNumber = 5;
    private global::AElf.Types.Hash dappId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash DappId {
      get { return dappId_; }
      set {
        dappId_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 6;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityRemoved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityRemoved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidityIds, other.LiquidityIds)) return false;
      if (LpAmount != other.LpAmount) return false;
      if (TokenAAmount != other.TokenAAmount) return false;
      if (TokenBAmount != other.TokenBAmount) return false;
      if (!object.Equals(DappId, other.DappId)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidityIds_ != null) hash ^= LiquidityIds.GetHashCode();
      if (LpAmount != 0L) hash ^= LpAmount.GetHashCode();
      if (TokenAAmount != 0L) hash ^= TokenAAmount.GetHashCode();
      if (TokenBAmount != 0L) hash ^= TokenBAmount.GetHashCode();
      if (dappId_ != null) hash ^= DappId.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (liquidityIds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LiquidityIds);
      }
      if (LpAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LpAmount);
      }
      if (TokenAAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TokenAAmount);
      }
      if (TokenBAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TokenBAmount);
      }
      if (dappId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DappId);
      }
      if (seed_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidityIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityIds);
      }
      if (LpAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpAmount);
      }
      if (TokenAAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenAAmount);
      }
      if (TokenBAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenBAmount);
      }
      if (dappId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DappId);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityRemoved other) {
      if (other == null) {
        return;
      }
      if (other.liquidityIds_ != null) {
        if (liquidityIds_ == null) {
          LiquidityIds = new global::EcoEarn.Contracts.Rewards.HashList();
        }
        LiquidityIds.MergeFrom(other.LiquidityIds);
      }
      if (other.LpAmount != 0L) {
        LpAmount = other.LpAmount;
      }
      if (other.TokenAAmount != 0L) {
        TokenAAmount = other.TokenAAmount;
      }
      if (other.TokenBAmount != 0L) {
        TokenBAmount = other.TokenBAmount;
      }
      if (other.dappId_ != null) {
        if (dappId_ == null) {
          DappId = new global::AElf.Types.Hash();
        }
        DappId.MergeFrom(other.DappId);
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (liquidityIds_ == null) {
              LiquidityIds = new global::EcoEarn.Contracts.Rewards.HashList();
            }
            input.ReadMessage(LiquidityIds);
            break;
          }
          case 16: {
            LpAmount = input.ReadInt64();
            break;
          }
          case 24: {
            TokenAAmount = input.ReadInt64();
            break;
          }
          case 32: {
            TokenBAmount = input.ReadInt64();
            break;
          }
          case 42: {
            if (dappId_ == null) {
              DappId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(DappId);
            break;
          }
          case 50: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityStaked : pb::IMessage<LiquidityStaked> {
    private static readonly pb::MessageParser<LiquidityStaked> _parser = new pb::MessageParser<LiquidityStaked>(() => new LiquidityStaked());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityStaked> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityStaked() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityStaked(LiquidityStaked other) : this() {
      liquidityIds_ = other.liquidityIds_ != null ? other.liquidityIds_.Clone() : null;
      poolId_ = other.poolId_ != null ? other.poolId_.Clone() : null;
      lpAmount_ = other.lpAmount_;
      period_ = other.period_;
      stakeId_ = other.stakeId_ != null ? other.stakeId_.Clone() : null;
      seed_ = other.seed_ != null ? other.seed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityStaked Clone() {
      return new LiquidityStaked(this);
    }

    /// <summary>Field number for the "liquidity_ids" field.</summary>
    public const int LiquidityIdsFieldNumber = 1;
    private global::EcoEarn.Contracts.Rewards.HashList liquidityIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.HashList LiquidityIds {
      get { return liquidityIds_; }
      set {
        liquidityIds_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 2;
    private global::AElf.Types.Hash poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "lp_amount" field.</summary>
    public const int LpAmountFieldNumber = 3;
    private long lpAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpAmount {
      get { return lpAmount_; }
      set {
        lpAmount_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 4;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "stake_id" field.</summary>
    public const int StakeIdFieldNumber = 5;
    private global::AElf.Types.Hash stakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash StakeId {
      get { return stakeId_; }
      set {
        stakeId_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 6;
    private global::AElf.Types.Hash seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityStaked);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityStaked other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidityIds, other.LiquidityIds)) return false;
      if (!object.Equals(PoolId, other.PoolId)) return false;
      if (LpAmount != other.LpAmount) return false;
      if (Period != other.Period) return false;
      if (!object.Equals(StakeId, other.StakeId)) return false;
      if (!object.Equals(Seed, other.Seed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidityIds_ != null) hash ^= LiquidityIds.GetHashCode();
      if (poolId_ != null) hash ^= PoolId.GetHashCode();
      if (LpAmount != 0L) hash ^= LpAmount.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (stakeId_ != null) hash ^= StakeId.GetHashCode();
      if (seed_ != null) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (liquidityIds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LiquidityIds);
      }
      if (poolId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PoolId);
      }
      if (LpAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LpAmount);
      }
      if (Period != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Period);
      }
      if (stakeId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StakeId);
      }
      if (seed_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidityIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiquidityIds);
      }
      if (poolId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoolId);
      }
      if (LpAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpAmount);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (stakeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StakeId);
      }
      if (seed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityStaked other) {
      if (other == null) {
        return;
      }
      if (other.liquidityIds_ != null) {
        if (liquidityIds_ == null) {
          LiquidityIds = new global::EcoEarn.Contracts.Rewards.HashList();
        }
        LiquidityIds.MergeFrom(other.LiquidityIds);
      }
      if (other.poolId_ != null) {
        if (poolId_ == null) {
          PoolId = new global::AElf.Types.Hash();
        }
        PoolId.MergeFrom(other.PoolId);
      }
      if (other.LpAmount != 0L) {
        LpAmount = other.LpAmount;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.stakeId_ != null) {
        if (stakeId_ == null) {
          StakeId = new global::AElf.Types.Hash();
        }
        StakeId.MergeFrom(other.StakeId);
      }
      if (other.seed_ != null) {
        if (seed_ == null) {
          Seed = new global::AElf.Types.Hash();
        }
        Seed.MergeFrom(other.Seed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (liquidityIds_ == null) {
              LiquidityIds = new global::EcoEarn.Contracts.Rewards.HashList();
            }
            input.ReadMessage(LiquidityIds);
            break;
          }
          case 18: {
            if (poolId_ == null) {
              PoolId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PoolId);
            break;
          }
          case 24: {
            LpAmount = input.ReadInt64();
            break;
          }
          case 32: {
            Period = input.ReadInt64();
            break;
          }
          case 42: {
            if (stakeId_ == null) {
              StakeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(StakeId);
            break;
          }
          case 50: {
            if (seed_ == null) {
              Seed = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Seed);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Joined : pb::IMessage<Joined> {
    private static readonly pb::MessageParser<Joined> _parser = new pb::MessageParser<Joined>(() => new Joined());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Joined> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joined() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joined(Joined other) : this() {
      domain_ = other.domain_;
      registrant_ = other.registrant_ != null ? other.registrant_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joined Clone() {
      return new Joined(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registrant" field.</summary>
    public const int RegistrantFieldNumber = 2;
    private global::AElf.Types.Address registrant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Registrant {
      get { return registrant_; }
      set {
        registrant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Joined);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Joined other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (!object.Equals(Registrant, other.Registrant)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (registrant_ != null) hash ^= Registrant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (registrant_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Registrant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (registrant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Registrant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Joined other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.registrant_ != null) {
        if (registrant_ == null) {
          Registrant = new global::AElf.Types.Address();
        }
        Registrant.MergeFrom(other.Registrant);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            if (registrant_ == null) {
              Registrant = new global::AElf.Types.Address();
            }
            input.ReadMessage(Registrant);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferralAccepted : pb::IMessage<ReferralAccepted> {
    private static readonly pb::MessageParser<ReferralAccepted> _parser = new pb::MessageParser<ReferralAccepted>(() => new ReferralAccepted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferralAccepted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferralAccepted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferralAccepted(ReferralAccepted other) : this() {
      referrer_ = other.referrer_ != null ? other.referrer_.Clone() : null;
      invitee_ = other.invitee_ != null ? other.invitee_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferralAccepted Clone() {
      return new ReferralAccepted(this);
    }

    /// <summary>Field number for the "referrer" field.</summary>
    public const int ReferrerFieldNumber = 1;
    private global::AElf.Types.Address referrer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Referrer {
      get { return referrer_; }
      set {
        referrer_ = value;
      }
    }

    /// <summary>Field number for the "invitee" field.</summary>
    public const int InviteeFieldNumber = 2;
    private global::AElf.Types.Address invitee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Invitee {
      get { return invitee_; }
      set {
        invitee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferralAccepted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferralAccepted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Referrer, other.Referrer)) return false;
      if (!object.Equals(Invitee, other.Invitee)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (referrer_ != null) hash ^= Referrer.GetHashCode();
      if (invitee_ != null) hash ^= Invitee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (referrer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Referrer);
      }
      if (invitee_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Invitee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (referrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Referrer);
      }
      if (invitee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invitee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferralAccepted other) {
      if (other == null) {
        return;
      }
      if (other.referrer_ != null) {
        if (referrer_ == null) {
          Referrer = new global::AElf.Types.Address();
        }
        Referrer.MergeFrom(other.Referrer);
      }
      if (other.invitee_ != null) {
        if (invitee_ == null) {
          Invitee = new global::AElf.Types.Address();
        }
        Invitee.MergeFrom(other.Invitee);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (referrer_ == null) {
              Referrer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Referrer);
            break;
          }
          case 18: {
            if (invitee_ == null) {
              Invitee = new global::AElf.Types.Address();
            }
            input.ReadMessage(Invitee);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointsContractConfigSet : pb::IMessage<PointsContractConfigSet> {
    private static readonly pb::MessageParser<PointsContractConfigSet> _parser = new pb::MessageParser<PointsContractConfigSet>(() => new PointsContractConfigSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointsContractConfigSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EcoEarn.Contracts.Rewards.EcoearnRewardsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfigSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfigSet(PointsContractConfigSet other) : this() {
      pointsContract_ = other.pointsContract_ != null ? other.pointsContract_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsContractConfigSet Clone() {
      return new PointsContractConfigSet(this);
    }

    /// <summary>Field number for the "points_contract" field.</summary>
    public const int PointsContractFieldNumber = 1;
    private global::AElf.Types.Address pointsContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address PointsContract {
      get { return pointsContract_; }
      set {
        pointsContract_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::EcoEarn.Contracts.Rewards.PointsContractConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EcoEarn.Contracts.Rewards.PointsContractConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointsContractConfigSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointsContractConfigSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PointsContract, other.PointsContract)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pointsContract_ != null) hash ^= PointsContract.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pointsContract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PointsContract);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pointsContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointsContract);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointsContractConfigSet other) {
      if (other == null) {
        return;
      }
      if (other.pointsContract_ != null) {
        if (pointsContract_ == null) {
          PointsContract = new global::AElf.Types.Address();
        }
        PointsContract.MergeFrom(other.PointsContract);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::EcoEarn.Contracts.Rewards.PointsContractConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pointsContract_ == null) {
              PointsContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(PointsContract);
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::EcoEarn.Contracts.Rewards.PointsContractConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
