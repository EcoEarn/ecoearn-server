// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ecoearn_tokens.proto
// </auto-generated>
// Original file comments:
// the version of the language, use proto3 for contracts
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace EcoEarn.Contracts.Tokens {

  #region Events
  public partial class Registered : aelf::IEvent<Registered>
  {
    public global::System.Collections.Generic.IEnumerable<Registered> GetIndexed()
    {
      return new List<Registered>
      {
      };
    }

    public Registered GetNonIndexed()
    {
      return new Registered
      {
        DappId = DappId,
        Admin = Admin,
      };
    }
  }

  public partial class TokensPoolCreated : aelf::IEvent<TokensPoolCreated>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolCreated> GetIndexed()
    {
      return new List<TokensPoolCreated>
      {
      };
    }

    public TokensPoolCreated GetNonIndexed()
    {
      return new TokensPoolCreated
      {
        DappId = DappId,
        Config = Config,
        PoolId = PoolId,
        Amount = Amount,
        AddressInfo = AddressInfo,
      };
    }
  }

  public partial class TokensPoolEndTimeSet : aelf::IEvent<TokensPoolEndTimeSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolEndTimeSet> GetIndexed()
    {
      return new List<TokensPoolEndTimeSet>
      {
      };
    }

    public TokensPoolEndTimeSet GetNonIndexed()
    {
      return new TokensPoolEndTimeSet
      {
        PoolId = PoolId,
        EndTime = EndTime,
        Amount = Amount,
      };
    }
  }

  public partial class TokensPoolRewardConfigSet : aelf::IEvent<TokensPoolRewardConfigSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolRewardConfigSet> GetIndexed()
    {
      return new List<TokensPoolRewardConfigSet>
      {
      };
    }

    public TokensPoolRewardConfigSet GetNonIndexed()
    {
      return new TokensPoolRewardConfigSet
      {
        PoolId = PoolId,
        ReleasePeriods = ReleasePeriods,
        ClaimInterval = ClaimInterval,
      };
    }
  }

  public partial class TokensPoolStakeConfigSet : aelf::IEvent<TokensPoolStakeConfigSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolStakeConfigSet> GetIndexed()
    {
      return new List<TokensPoolStakeConfigSet>
      {
      };
    }

    public TokensPoolStakeConfigSet GetNonIndexed()
    {
      return new TokensPoolStakeConfigSet
      {
        PoolId = PoolId,
        MinimumAmount = MinimumAmount,
        MaximumStakeDuration = MaximumStakeDuration,
        MinimumClaimAmount = MinimumClaimAmount,
        MinimumStakeDuration = MinimumStakeDuration,
      };
    }
  }

  public partial class Staked : aelf::IEvent<Staked>
  {
    public global::System.Collections.Generic.IEnumerable<Staked> GetIndexed()
    {
      return new List<Staked>
      {
      };
    }

    public Staked GetNonIndexed()
    {
      return new Staked
      {
        StakeInfo = StakeInfo,
        PoolData = PoolData,
      };
    }
  }

  public partial class Unlocked : aelf::IEvent<Unlocked>
  {
    public global::System.Collections.Generic.IEnumerable<Unlocked> GetIndexed()
    {
      return new List<Unlocked>
      {
      };
    }

    public Unlocked GetNonIndexed()
    {
      return new Unlocked
      {
        PoolId = PoolId,
        StakeInfo = StakeInfo,
        Amount = Amount,
        PoolData = PoolData,
      };
    }
  }

  public partial class Claimed : aelf::IEvent<Claimed>
  {
    public global::System.Collections.Generic.IEnumerable<Claimed> GetIndexed()
    {
      return new List<Claimed>
      {
      };
    }

    public Claimed GetNonIndexed()
    {
      return new Claimed
      {
        PoolId = PoolId,
        Account = Account,
        Amount = Amount,
      };
    }
  }

  public partial class TokenRecovered : aelf::IEvent<TokenRecovered>
  {
    public global::System.Collections.Generic.IEnumerable<TokenRecovered> GetIndexed()
    {
      return new List<TokenRecovered>
      {
      };
    }

    public TokenRecovered GetNonIndexed()
    {
      return new TokenRecovered
      {
        PoolId = PoolId,
        Token = Token,
        Amount = Amount,
        Account = Account,
      };
    }
  }

  public partial class ConfigSet : aelf::IEvent<ConfigSet>
  {
    public global::System.Collections.Generic.IEnumerable<ConfigSet> GetIndexed()
    {
      return new List<ConfigSet>
      {
      };
    }

    public ConfigSet GetNonIndexed()
    {
      return new ConfigSet
      {
        Config = Config,
      };
    }
  }

  public partial class AdminSet : aelf::IEvent<AdminSet>
  {
    public global::System.Collections.Generic.IEnumerable<AdminSet> GetIndexed()
    {
      return new List<AdminSet>
      {
      };
    }

    public AdminSet GetNonIndexed()
    {
      return new AdminSet
      {
        Admin = Admin,
      };
    }
  }

  public partial class DappAdminSet : aelf::IEvent<DappAdminSet>
  {
    public global::System.Collections.Generic.IEnumerable<DappAdminSet> GetIndexed()
    {
      return new List<DappAdminSet>
      {
      };
    }

    public DappAdminSet GetNonIndexed()
    {
      return new DappAdminSet
      {
        DappId = DappId,
        Admin = Admin,
      };
    }
  }

  public partial class TokensPoolFixedBoostFactorSet : aelf::IEvent<TokensPoolFixedBoostFactorSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolFixedBoostFactorSet> GetIndexed()
    {
      return new List<TokensPoolFixedBoostFactorSet>
      {
      };
    }

    public TokensPoolFixedBoostFactorSet GetNonIndexed()
    {
      return new TokensPoolFixedBoostFactorSet
      {
        PoolId = PoolId,
        FixedBoostFactor = FixedBoostFactor,
      };
    }
  }

  public partial class TokensPoolRewardPerSecondSet : aelf::IEvent<TokensPoolRewardPerSecondSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolRewardPerSecondSet> GetIndexed()
    {
      return new List<TokensPoolRewardPerSecondSet>
      {
      };
    }

    public TokensPoolRewardPerSecondSet GetNonIndexed()
    {
      return new TokensPoolRewardPerSecondSet
      {
        PoolId = PoolId,
        RewardPerSecond = RewardPerSecond,
        PoolData = PoolData,
      };
    }
  }

  public partial class TokensPoolUnlockWindowDurationSet : aelf::IEvent<TokensPoolUnlockWindowDurationSet>
  {
    public global::System.Collections.Generic.IEnumerable<TokensPoolUnlockWindowDurationSet> GetIndexed()
    {
      return new List<TokensPoolUnlockWindowDurationSet>
      {
      };
    }

    public TokensPoolUnlockWindowDurationSet GetNonIndexed()
    {
      return new TokensPoolUnlockWindowDurationSet
      {
        PoolId = PoolId,
        UnlockWindowDuration = UnlockWindowDuration,
      };
    }
  }

  public partial class Renewed : aelf::IEvent<Renewed>
  {
    public global::System.Collections.Generic.IEnumerable<Renewed> GetIndexed()
    {
      return new List<Renewed>
      {
      };
    }

    public Renewed GetNonIndexed()
    {
      return new Renewed
      {
        StakeInfo = StakeInfo,
        PoolData = PoolData,
      };
    }
  }

  #endregion
  public static partial class EcoEarnTokensContractContainer
  {
    static readonly string __ServiceName = "EcoEarnTokensContract";

    #region Marshallers
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.RegisterInput> __Marshaller_RegisterInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.RegisterInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetDappAdminInput> __Marshaller_SetDappAdminInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetDappAdminInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Types.Hash> __Marshaller_aelf_Hash = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Types.Hash.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.DappInfo> __Marshaller_DappInfo = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.DappInfo.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.CreateTokensPoolInput> __Marshaller_CreateTokensPoolInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.CreateTokensPoolInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolEndTimeInput> __Marshaller_SetTokensPoolEndTimeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolEndTimeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardConfigInput> __Marshaller_SetTokensPoolRewardConfigInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardConfigInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolStakeConfigInput> __Marshaller_SetTokensPoolStakeConfigInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolStakeConfigInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetPoolInfoOutput> __Marshaller_GetPoolInfoOutput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetPoolInfoOutput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.PoolData> __Marshaller_PoolData = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.PoolData.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.PoolAddressInfo> __Marshaller_PoolAddressInfo = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.PoolAddressInfo.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Int64Value> __Marshaller_google_protobuf_Int64Value = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Int64Value.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolFixedBoostFactorInput> __Marshaller_SetTokensPoolFixedBoostFactorInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolFixedBoostFactorInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardPerSecondInput> __Marshaller_SetTokensPoolRewardPerSecondInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardPerSecondInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.SetTokensPoolUnlockWindowDurationInput> __Marshaller_SetTokensPoolUnlockWindowDurationInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.SetTokensPoolUnlockWindowDurationInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.StakeInput> __Marshaller_StakeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.StakeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.StakeForInput> __Marshaller_StakeForInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.StakeForInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.RenewInput> __Marshaller_RenewInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.RenewInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetStakeInfoOutput> __Marshaller_GetStakeInfoOutput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetStakeInfoOutput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetRewardInput> __Marshaller_GetRewardInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetRewardInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetRewardOutput> __Marshaller_GetRewardOutput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetRewardOutput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetUserStakeIdInput> __Marshaller_GetUserStakeIdInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetUserStakeIdInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.GetUserStakeCountInput> __Marshaller_GetUserStakeCountInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.GetUserStakeCountInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.RecoverTokenInput> __Marshaller_RecoverTokenInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.RecoverTokenInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.InitializeInput> __Marshaller_InitializeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.InitializeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::EcoEarn.Contracts.Tokens.Config> __Marshaller_Config = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EcoEarn.Contracts.Tokens.Config.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Types.Address> __Marshaller_aelf_Address = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Types.Address.Parser.ParseFrom);
    #endregion

    #region Methods
    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.RegisterInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Register = new aelf::Method<global::EcoEarn.Contracts.Tokens.RegisterInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Register",
        __Marshaller_RegisterInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetDappAdminInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetDappAdmin = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetDappAdminInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetDappAdmin",
        __Marshaller_SetDappAdminInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.DappInfo> __Method_GetDappInfo = new aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.DappInfo>(
        aelf::MethodType.View,
        __ServiceName,
        "GetDappInfo",
        __Marshaller_aelf_Hash,
        __Marshaller_DappInfo);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.CreateTokensPoolInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateTokensPool = new aelf::Method<global::EcoEarn.Contracts.Tokens.CreateTokensPoolInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "CreateTokensPool",
        __Marshaller_CreateTokensPoolInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolEndTimeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolEndTime = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolEndTimeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolEndTime",
        __Marshaller_SetTokensPoolEndTimeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardConfigInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolRewardConfig = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardConfigInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolRewardConfig",
        __Marshaller_SetTokensPoolRewardConfigInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolStakeConfigInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolStakeConfig = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolStakeConfigInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolStakeConfig",
        __Marshaller_SetTokensPoolStakeConfigInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.GetPoolInfoOutput> __Method_GetPoolInfo = new aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.GetPoolInfoOutput>(
        aelf::MethodType.View,
        __ServiceName,
        "GetPoolInfo",
        __Marshaller_aelf_Hash,
        __Marshaller_GetPoolInfoOutput);

    static readonly aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.PoolData> __Method_GetPoolData = new aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.PoolData>(
        aelf::MethodType.View,
        __ServiceName,
        "GetPoolData",
        __Marshaller_aelf_Hash,
        __Marshaller_PoolData);

    static readonly aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.PoolAddressInfo> __Method_GetPoolAddressInfo = new aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.PoolAddressInfo>(
        aelf::MethodType.View,
        __ServiceName,
        "GetPoolAddressInfo",
        __Marshaller_aelf_Hash,
        __Marshaller_PoolAddressInfo);

    static readonly aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Int64Value> __Method_GetPoolCount = new aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Int64Value>(
        aelf::MethodType.View,
        __ServiceName,
        "GetPoolCount",
        __Marshaller_aelf_Hash,
        __Marshaller_google_protobuf_Int64Value);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolFixedBoostFactorInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolFixedBoostFactor = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolFixedBoostFactorInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolFixedBoostFactor",
        __Marshaller_SetTokensPoolFixedBoostFactorInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardPerSecondInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolRewardPerSecond = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardPerSecondInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolRewardPerSecond",
        __Marshaller_SetTokensPoolRewardPerSecondInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolUnlockWindowDurationInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTokensPoolUnlockWindowDuration = new aelf::Method<global::EcoEarn.Contracts.Tokens.SetTokensPoolUnlockWindowDurationInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetTokensPoolUnlockWindowDuration",
        __Marshaller_SetTokensPoolUnlockWindowDurationInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.StakeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Stake = new aelf::Method<global::EcoEarn.Contracts.Tokens.StakeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Stake",
        __Marshaller_StakeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.StakeForInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_StakeFor = new aelf::Method<global::EcoEarn.Contracts.Tokens.StakeForInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "StakeFor",
        __Marshaller_StakeForInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.RenewInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Renew = new aelf::Method<global::EcoEarn.Contracts.Tokens.RenewInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Renew",
        __Marshaller_RenewInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.GetStakeInfoOutput> __Method_GetStakeInfo = new aelf::Method<global::AElf.Types.Hash, global::EcoEarn.Contracts.Tokens.GetStakeInfoOutput>(
        aelf::MethodType.View,
        __ServiceName,
        "GetStakeInfo",
        __Marshaller_aelf_Hash,
        __Marshaller_GetStakeInfoOutput);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.GetRewardInput, global::EcoEarn.Contracts.Tokens.GetRewardOutput> __Method_GetReward = new aelf::Method<global::EcoEarn.Contracts.Tokens.GetRewardInput, global::EcoEarn.Contracts.Tokens.GetRewardOutput>(
        aelf::MethodType.View,
        __ServiceName,
        "GetReward",
        __Marshaller_GetRewardInput,
        __Marshaller_GetRewardOutput);

    static readonly aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Unlock = new aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Unlock",
        __Marshaller_aelf_Hash,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.GetUserStakeIdInput, global::AElf.Types.Hash> __Method_GetUserStakeId = new aelf::Method<global::EcoEarn.Contracts.Tokens.GetUserStakeIdInput, global::AElf.Types.Hash>(
        aelf::MethodType.View,
        __ServiceName,
        "GetUserStakeId",
        __Marshaller_GetUserStakeIdInput,
        __Marshaller_aelf_Hash);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.GetUserStakeCountInput, global::Google.Protobuf.WellKnownTypes.Int64Value> __Method_GetUserStakeCount = new aelf::Method<global::EcoEarn.Contracts.Tokens.GetUserStakeCountInput, global::Google.Protobuf.WellKnownTypes.Int64Value>(
        aelf::MethodType.View,
        __ServiceName,
        "GetUserStakeCount",
        __Marshaller_GetUserStakeCountInput,
        __Marshaller_google_protobuf_Int64Value);

    static readonly aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Claim = new aelf::Method<global::AElf.Types.Hash, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Claim",
        __Marshaller_aelf_Hash,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.RecoverTokenInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RecoverToken = new aelf::Method<global::EcoEarn.Contracts.Tokens.RecoverTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "RecoverToken",
        __Marshaller_RecoverTokenInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.InitializeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Initialize = new aelf::Method<global::EcoEarn.Contracts.Tokens.InitializeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Initialize",
        __Marshaller_InitializeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::EcoEarn.Contracts.Tokens.Config, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetConfig = new aelf::Method<global::EcoEarn.Contracts.Tokens.Config, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetConfig",
        __Marshaller_Config,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::EcoEarn.Contracts.Tokens.Config> __Method_GetConfig = new aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::EcoEarn.Contracts.Tokens.Config>(
        aelf::MethodType.View,
        __ServiceName,
        "GetConfig",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Config);

    static readonly aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetAdmin = new aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetAdmin",
        __Marshaller_aelf_Address,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Types.Address> __Method_GetAdmin = new aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Types.Address>(
        aelf::MethodType.View,
        __ServiceName,
        "GetAdmin",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_aelf_Address);

    #endregion

    #region Descriptors
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EcoEarn.Contracts.Tokens.EcoearnTokensReflection.Descriptor.Services[0]; }
    }

    public static global::System.Collections.Generic.IReadOnlyList<global::Google.Protobuf.Reflection.ServiceDescriptor> Descriptors
    {
      get
      {
        return new global::System.Collections.Generic.List<global::Google.Protobuf.Reflection.ServiceDescriptor>()
        {
          global::AElf.Standards.ACS12.Acs12Reflection.Descriptor.Services[0],
          global::EcoEarn.Contracts.Tokens.EcoearnTokensReflection.Descriptor.Services[0],
        };
      }
    }
    #endregion

    // /// <summary>Base class for the contract of EcoEarnTokensContract</summary>
    // public abstract partial class EcoEarnTokensContractBase : AElf.Sdk.CSharp.CSharpSmartContract<EcoEarn.Contracts.Tokens.EcoEarnTokensContractState>
    // {
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Register(global::EcoEarn.Contracts.Tokens.RegisterInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetDappAdmin(global::EcoEarn.Contracts.Tokens.SetDappAdminInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.DappInfo GetDappInfo(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateTokensPool(global::EcoEarn.Contracts.Tokens.CreateTokensPoolInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolEndTime(global::EcoEarn.Contracts.Tokens.SetTokensPoolEndTimeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolRewardConfig(global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardConfigInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolStakeConfig(global::EcoEarn.Contracts.Tokens.SetTokensPoolStakeConfigInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.GetPoolInfoOutput GetPoolInfo(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.PoolData GetPoolData(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.PoolAddressInfo GetPoolAddressInfo(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Int64Value GetPoolCount(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolFixedBoostFactor(global::EcoEarn.Contracts.Tokens.SetTokensPoolFixedBoostFactorInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolRewardPerSecond(global::EcoEarn.Contracts.Tokens.SetTokensPoolRewardPerSecondInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTokensPoolUnlockWindowDuration(global::EcoEarn.Contracts.Tokens.SetTokensPoolUnlockWindowDurationInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Stake(global::EcoEarn.Contracts.Tokens.StakeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty StakeFor(global::EcoEarn.Contracts.Tokens.StakeForInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Renew(global::EcoEarn.Contracts.Tokens.RenewInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.GetStakeInfoOutput GetStakeInfo(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.GetRewardOutput GetReward(global::EcoEarn.Contracts.Tokens.GetRewardInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Unlock(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::AElf.Types.Hash GetUserStakeId(global::EcoEarn.Contracts.Tokens.GetUserStakeIdInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Int64Value GetUserStakeCount(global::EcoEarn.Contracts.Tokens.GetUserStakeCountInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Claim(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty RecoverToken(global::EcoEarn.Contracts.Tokens.RecoverTokenInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Initialize(global::EcoEarn.Contracts.Tokens.InitializeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetConfig(global::EcoEarn.Contracts.Tokens.Config input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::EcoEarn.Contracts.Tokens.Config GetConfig(global::Google.Protobuf.WellKnownTypes.Empty input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetAdmin(global::AElf.Types.Address input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::AElf.Types.Address GetAdmin(global::Google.Protobuf.WellKnownTypes.Empty input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    // }
    //
    // public static aelf::ServerServiceDefinition BindService(EcoEarnTokensContractBase serviceImpl)
    // {
    //   return aelf::ServerServiceDefinition.CreateBuilder()
    //       .AddDescriptors(Descriptors)
    //       .AddMethod(__Method_Register, serviceImpl.Register)
    //       .AddMethod(__Method_SetDappAdmin, serviceImpl.SetDappAdmin)
    //       .AddMethod(__Method_GetDappInfo, serviceImpl.GetDappInfo)
    //       .AddMethod(__Method_CreateTokensPool, serviceImpl.CreateTokensPool)
    //       .AddMethod(__Method_SetTokensPoolEndTime, serviceImpl.SetTokensPoolEndTime)
    //       .AddMethod(__Method_SetTokensPoolRewardConfig, serviceImpl.SetTokensPoolRewardConfig)
    //       .AddMethod(__Method_SetTokensPoolStakeConfig, serviceImpl.SetTokensPoolStakeConfig)
    //       .AddMethod(__Method_GetPoolInfo, serviceImpl.GetPoolInfo)
    //       .AddMethod(__Method_GetPoolData, serviceImpl.GetPoolData)
    //       .AddMethod(__Method_GetPoolAddressInfo, serviceImpl.GetPoolAddressInfo)
    //       .AddMethod(__Method_GetPoolCount, serviceImpl.GetPoolCount)
    //       .AddMethod(__Method_SetTokensPoolFixedBoostFactor, serviceImpl.SetTokensPoolFixedBoostFactor)
    //       .AddMethod(__Method_SetTokensPoolRewardPerSecond, serviceImpl.SetTokensPoolRewardPerSecond)
    //       .AddMethod(__Method_SetTokensPoolUnlockWindowDuration, serviceImpl.SetTokensPoolUnlockWindowDuration)
    //       .AddMethod(__Method_Stake, serviceImpl.Stake)
    //       .AddMethod(__Method_StakeFor, serviceImpl.StakeFor)
    //       .AddMethod(__Method_Renew, serviceImpl.Renew)
    //       .AddMethod(__Method_GetStakeInfo, serviceImpl.GetStakeInfo)
    //       .AddMethod(__Method_GetReward, serviceImpl.GetReward)
    //       .AddMethod(__Method_Unlock, serviceImpl.Unlock)
    //       .AddMethod(__Method_GetUserStakeId, serviceImpl.GetUserStakeId)
    //       .AddMethod(__Method_GetUserStakeCount, serviceImpl.GetUserStakeCount)
    //       .AddMethod(__Method_Claim, serviceImpl.Claim)
    //       .AddMethod(__Method_RecoverToken, serviceImpl.RecoverToken)
    //       .AddMethod(__Method_Initialize, serviceImpl.Initialize)
    //       .AddMethod(__Method_SetConfig, serviceImpl.SetConfig)
    //       .AddMethod(__Method_GetConfig, serviceImpl.GetConfig)
    //       .AddMethod(__Method_SetAdmin, serviceImpl.SetAdmin)
    //       .AddMethod(__Method_GetAdmin, serviceImpl.GetAdmin).Build();
    // }

  }
}
#endregion

